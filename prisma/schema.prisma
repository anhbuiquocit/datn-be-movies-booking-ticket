generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model User {
  id        String    @id @default(uuid())
  createAt  DateTime? @default(now())
  updateAt  DateTime?
  deleteAt  DateTime?
  firstname String?
  lastname  String?
  birthday  DateTime?
  address   String?
  email     String
  password  String
  username  String    @unique
  active    Boolean?
  point     Int?
  phone     String?
  role      String?
  Order     Order[]
  Booking   Booking[]
}

model Film {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  trailler    String
  name        String
  description String?
  director    String?
  actor       String?
  time        String?
  Showing     Showing[]
}

model ClusterCinema {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  name      String
  phone     String
  Cinema    Cinema[]
}

model Cinema {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  name            String
  address         String
  phone           String
  clusterCinema   ClusterCinema @relation(fields: [ClusterCinemaId], references: [id])
  ClusterCinemaId String
  Room            Room[]
}

model Room {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  name      String
  cinema    Cinema    @relation(fields: [CinemaId], references: [id])
  CinemaId  String
  Seat      Seat[]
  Showing   Showing[]
}

model Seat {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  name        String
  position    String
  room        Room          @relation(fields: [RoomId], references: [id])
  RoomId      String
  BookingItem BookingItem[]
}

model Promotion {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  code        String
  discount    Float
  maxDiscount Float
  startDate   DateTime
  endDate     DateTime
  Order       Order[]
  Booking     Booking[]
}

model Showing {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  room      Room      @relation(fields: [RoomId], references: [id])
  RoomId    String
  film      Film      @relation(fields: [FilmId], references: [id])
  FilmId    String
  startDate DateTime
  endDate   DateTime
  Order     Order[]
  Booking   Booking[]
}

model BookingItem {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  seat      Seat      @relation(fields: [SeatId], references: [id])
  SeatId    String
  amount    Int
  price     Int
  Order     Order[]
  Booking   Booking[]
}

model Order {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  user          User        @relation(fields: [UserId], references: [id])
  UserId        String
  showing       Showing     @relation(fields: [ShowingId], references: [id])
  ShowingId     String
  amount        Int
  price         Int
  bookingItem   BookingItem @relation(fields: [BookingItemId], references: [id])
  BookingItemId String
  promotion     Promotion   @relation(fields: [PromotionId], references: [id])
  PromotionId   String
}

model Booking {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  user          User        @relation(fields: [UserId], references: [id])
  UserId        String
  showing       Showing     @relation(fields: [ShowingId], references: [id])
  ShowingId     String
  amount        Int
  price         Int
  bookingItem   BookingItem @relation(fields: [BookingItemId], references: [id])
  BookingItemId String
  promotion     Promotion   @relation(fields: [PromotionId], references: [id])
  PromotionId   String
}
