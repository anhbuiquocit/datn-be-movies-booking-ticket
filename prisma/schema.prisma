generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

model User {
  id         String       @id @default(uuid())
  createAt   DateTime?    @default(now())
  updateAt   DateTime?
  deleteAt   DateTime?
  image      String?
  firstname  String?
  lastname   String?
  birthday   DateTime?
  address    String?
  email      String
  password   String
  username   String       @unique
  active     Boolean?
  point      Int?
  phone      String?
  role       String?
  Booking    Booking[]
  ReviewFilm ReviewFilm[]
}

model Admin {
  id        String    @id @default(uuid())
  createAt  DateTime? @default(now())
  updateAt  DateTime?
  deleteAt  DateTime?
  firstname String?
  lastname  String?
  birthday  DateTime?
  address   String?
  email     String
  image     String?
  password  String
  username  String    @unique
  phone     String?
  role      String?
}

model Category {
  id          String    @id @default(uuid())
  createAt    DateTime? @default(now())
  updateAt    DateTime?
  deleteAt    DateTime?
  name        String
  description String?   @db.VarChar(5000)
  Film        Film[]
}

model Film {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  trailler          String
  name              String
  description       String?       @db.VarChar(5000)
  director          String?
  actor             String?
  time              Int?
  image             String?
  imageDescription1 String?
  imageDescription2 String?
  imageDescription3 String?
  Showing           Showing[]
  ReviewFilm        ReviewFilm[]
  ActorOnFilm       ActorOnFilm[]
  Category          Category?     @relation(fields: [categoryId], references: [id])
  categoryId        String?
}

model ReviewFilm {
  id      String  @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  film    Film    @relation(fields: [filmId], references: [id])
  filmId  String
  comment String? @db.VarChar(5000)
}

model ClusterCinema {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  name      String
  phone     String
  Cinema    Cinema[]
}

model Cinema {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  name            String
  address         String
  phone           String
  clusterCinema   ClusterCinema @relation(fields: [ClusterCinemaId], references: [id])
  ClusterCinemaId String
  Room            Room[]
}

model Room {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  name      String
  cinema    Cinema    @relation(fields: [CinemaId], references: [id])
  CinemaId  String
  Seat      Seat[]
  Showing   Showing[]
}

model Seat {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  name        String
  position    String
  room        Room          @relation(fields: [RoomId], references: [id])
  RoomId      String
  BookingItem BookingItem[]
}

model Promotion {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  code        String
  discount    Float
  maxDiscount Float
  startDate   DateTime?
  endDate     DateTime?
  startTime   DateTime?
  endTime     DateTime?
  Booking     Booking[]
}

model Showing {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  room        Room          @relation(fields: [RoomId], references: [id])
  RoomId      String
  film        Film          @relation(fields: [FilmId], references: [id])
  FilmId      String
  price       Int
  startDate   DateTime?
  endDate     DateTime?
  startTime   DateTime?
  endTime     DateTime?
  BookingItem BookingItem[]
}

model BookingItem {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  seat      Seat      @relation(fields: [SeatId], references: [id])
  SeatId    String
  showing   Showing   @relation(fields: [ShowingId], references: [id])
  ShowingId String
  Booking   Booking   @relation(fields: [bookingId], references: [id])
  bookingId String
}

model Booking {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  user           User          @relation(fields: [UserId], references: [id])
  UserId         String
  amount         Int
  price          Int
  bookingItem    BookingItem[]
  promotion      Promotion?    @relation(fields: [PromotionId], references: [id])
  PromotionId    String?
  isPayment      Boolean?
  lineSeatMatrix String?       @db.VarChar(5000)
}

model Actor {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  name        String
  birthday    DateTime?
  description String?
  image       String?
  ActorOnFilm ActorOnFilm[]
}

model ActorOnFilm {
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?
  actor     Actor     @relation(fields: [actorId], references: [id])
  actorId   String
  film      Film      @relation(fields: [filmId], references: [id])
  filmId    String

  @@id([actorId, filmId])
}
