# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClusterCinemaCount {
  Cinema: Int!
}

type ClusterCinema {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  phone: String!
  Cinema: [Cinema!]
  _count: ClusterCinemaCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CinemaCount {
  Room: Int!
}

type Cinema {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  address: String!
  phone: String!
  clusterCinema: ClusterCinema!
  ClusterCinemaId: String!
  Room: [Room!]
  _count: CinemaCount!
}

type FilmCount {
  Showing: Int!
}

type Film {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: String
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  Showing: [Showing!]
  _count: FilmCount!
}

type ShowingCount {
  BookingItem: Int!
}

type Showing {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  room: Room!
  RoomId: String!
  film: Film!
  FilmId: String!
  startDate: DateTime!
  endDate: DateTime!
  BookingItem: [BookingItem!]
  _count: ShowingCount!
}

type RoomCount {
  Seat: Int!
  Showing: Int!
}

type Room {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: Cinema!
  CinemaId: String!
  Seat: [Seat!]
  Showing: [Showing!]
  _count: RoomCount!
}

type SeatCount {
  BookingItem: Int!
}

type Seat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: Room!
  RoomId: String!
  BookingItem: [BookingItem!]
  _count: SeatCount!
}

type BookingItemCount {
  Booking: Int!
}

type BookingItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  seat: Seat!
  SeatId: String!
  showing: Showing!
  ShowingId: String!
  price: Int!
  Booking: [Booking!]
  _count: BookingItemCount!
}

type PromotionCount {
  Booking: Int!
}

type Promotion {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime!
  endDate: DateTime!
  Booking: [Booking!]
  _count: PromotionCount!
}

type Booking {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  user: User!
  UserId: String!
  amount: Int!
  price: Int!
  bookingItem: BookingItem!
  BookingItemId: String!
  promotion: Promotion!
  PromotionId: String!
}

type UserCount {
  Booking: Int!
}

type User {
  id: ID!
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  Booking: [Booking!]
  _count: UserCount!
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Query {
  UsersConnection(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  queryMe: User!
  films(where: FilmWhereInput, orderBy: [FilmOrderByWithRelationInput!], cursor: FilmWhereUniqueInput, take: Int, skip: Int, distinct: [FilmScalarFieldEnum!]): [Film!]!
  film(where: FilmWhereUniqueInput!): Film!
  showingConnection(where: ShowingWhereInput, orderBy: [ShowingOrderByWithRelationInput!], cursor: ShowingWhereUniqueInput, take: Int, skip: Int, distinct: [ShowingScalarFieldEnum!]): [Showing!]!
  seatConnection(where: SeatWhereInput, orderBy: [SeatOrderByWithRelationInput!], cursor: SeatWhereUniqueInput, take: Int, skip: Int, distinct: [SeatScalarFieldEnum!]): [Seat!]!
  roomConnection(where: RoomWhereInput, orderBy: [RoomOrderByWithRelationInput!], cursor: RoomWhereUniqueInput, take: Int, skip: Int, distinct: [RoomScalarFieldEnum!]): [Room!]!
  promotionConnection(where: PromotionWhereInput, orderBy: [PromotionOrderByWithRelationInput!], cursor: PromotionWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionScalarFieldEnum!]): [Promotion!]!
  bookingItemConnection(where: BookingItemWhereInput, orderBy: [BookingItemOrderByWithRelationInput!], cursor: BookingItemWhereUniqueInput, take: Int, skip: Int, distinct: [BookingItemScalarFieldEnum!]): [BookingItem!]!
  bookingConnection(where: BookingWhereInput, orderBy: [BookingOrderByWithRelationInput!], cursor: BookingWhereUniqueInput, take: Int, skip: Int, distinct: [BookingScalarFieldEnum!]): [Booking!]!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createAt: DateTimeNullableFilter
  updateAt: DateTimeNullableFilter
  deleteAt: DateTimeNullableFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  birthday: DateTimeNullableFilter
  address: StringNullableFilter
  email: StringFilter
  password: StringFilter
  username: StringFilter
  active: BoolNullableFilter
  point: IntNullableFilter
  phone: StringNullableFilter
  role: StringNullableFilter
  Booking: BookingListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input BookingListRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  UserId: StringFilter
  amount: IntFilter
  price: IntFilter
  bookingItem: BookingItemRelationFilter
  BookingItemId: StringFilter
  promotion: PromotionRelationFilter
  PromotionId: StringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input BookingItemRelationFilter {
  is: BookingItemWhereInput
  isNot: BookingItemWhereInput
}

input BookingItemWhereInput {
  AND: [BookingItemWhereInput!]
  OR: [BookingItemWhereInput!]
  NOT: [BookingItemWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  seat: SeatRelationFilter
  SeatId: StringFilter
  showing: ShowingRelationFilter
  ShowingId: StringFilter
  price: IntFilter
  Booking: BookingListRelationFilter
}

input SeatRelationFilter {
  is: SeatWhereInput
  isNot: SeatWhereInput
}

input SeatWhereInput {
  AND: [SeatWhereInput!]
  OR: [SeatWhereInput!]
  NOT: [SeatWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  position: StringFilter
  room: RoomRelationFilter
  RoomId: StringFilter
  BookingItem: BookingItemListRelationFilter
}

input RoomRelationFilter {
  is: RoomWhereInput
  isNot: RoomWhereInput
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  cinema: CinemaRelationFilter
  CinemaId: StringFilter
  Seat: SeatListRelationFilter
  Showing: ShowingListRelationFilter
}

input CinemaRelationFilter {
  is: CinemaWhereInput
  isNot: CinemaWhereInput
}

input CinemaWhereInput {
  AND: [CinemaWhereInput!]
  OR: [CinemaWhereInput!]
  NOT: [CinemaWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  clusterCinema: ClusterCinemaRelationFilter
  ClusterCinemaId: StringFilter
  Room: RoomListRelationFilter
}

input ClusterCinemaRelationFilter {
  is: ClusterCinemaWhereInput
  isNot: ClusterCinemaWhereInput
}

input ClusterCinemaWhereInput {
  AND: [ClusterCinemaWhereInput!]
  OR: [ClusterCinemaWhereInput!]
  NOT: [ClusterCinemaWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  phone: StringFilter
  Cinema: CinemaListRelationFilter
}

input CinemaListRelationFilter {
  every: CinemaWhereInput
  some: CinemaWhereInput
  none: CinemaWhereInput
}

input RoomListRelationFilter {
  every: RoomWhereInput
  some: RoomWhereInput
  none: RoomWhereInput
}

input SeatListRelationFilter {
  every: SeatWhereInput
  some: SeatWhereInput
  none: SeatWhereInput
}

input ShowingListRelationFilter {
  every: ShowingWhereInput
  some: ShowingWhereInput
  none: ShowingWhereInput
}

input ShowingWhereInput {
  AND: [ShowingWhereInput!]
  OR: [ShowingWhereInput!]
  NOT: [ShowingWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  room: RoomRelationFilter
  RoomId: StringFilter
  film: FilmRelationFilter
  FilmId: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  BookingItem: BookingItemListRelationFilter
}

input FilmRelationFilter {
  is: FilmWhereInput
  isNot: FilmWhereInput
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  trailler: StringFilter
  name: StringFilter
  description: StringNullableFilter
  director: StringNullableFilter
  actor: StringNullableFilter
  time: StringNullableFilter
  image: StringNullableFilter
  imageDescription1: StringNullableFilter
  imageDescription2: StringNullableFilter
  imageDescription3: StringNullableFilter
  Showing: ShowingListRelationFilter
}

input BookingItemListRelationFilter {
  every: BookingItemWhereInput
  some: BookingItemWhereInput
  none: BookingItemWhereInput
}

input ShowingRelationFilter {
  is: ShowingWhereInput
  isNot: ShowingWhereInput
}

input PromotionRelationFilter {
  is: PromotionWhereInput
  isNot: PromotionWhereInput
}

input PromotionWhereInput {
  AND: [PromotionWhereInput!]
  OR: [PromotionWhereInput!]
  NOT: [PromotionWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  code: StringFilter
  discount: FloatFilter
  maxDiscount: FloatFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  Booking: BookingListRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createAt: SortOrder
  updateAt: SortOrder
  deleteAt: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  birthday: SortOrder
  address: SortOrder
  email: SortOrder
  password: SortOrder
  username: SortOrder
  active: SortOrder
  point: SortOrder
  phone: SortOrder
  role: SortOrder
  Booking: BookingOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input BookingOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum UserScalarFieldEnum {
  id
  createAt
  updateAt
  deleteAt
  firstname
  lastname
  birthday
  address
  email
  password
  username
  active
  point
  phone
  role
}

input FilmOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  trailler: SortOrder
  name: SortOrder
  description: SortOrder
  director: SortOrder
  actor: SortOrder
  time: SortOrder
  image: SortOrder
  imageDescription1: SortOrder
  imageDescription2: SortOrder
  imageDescription3: SortOrder
  Showing: ShowingOrderByRelationAggregateInput
}

input ShowingOrderByRelationAggregateInput {
  _count: SortOrder
}

input FilmWhereUniqueInput {
  id: String
}

enum FilmScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  trailler
  name
  description
  director
  actor
  time
  image
  imageDescription1
  imageDescription2
  imageDescription3
}

input ShowingOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  room: RoomOrderByWithRelationInput
  RoomId: SortOrder
  film: FilmOrderByWithRelationInput
  FilmId: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  BookingItem: BookingItemOrderByRelationAggregateInput
}

input RoomOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  cinema: CinemaOrderByWithRelationInput
  CinemaId: SortOrder
  Seat: SeatOrderByRelationAggregateInput
  Showing: ShowingOrderByRelationAggregateInput
}

input CinemaOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
  clusterCinema: ClusterCinemaOrderByWithRelationInput
  ClusterCinemaId: SortOrder
  Room: RoomOrderByRelationAggregateInput
}

input ClusterCinemaOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  phone: SortOrder
  Cinema: CinemaOrderByRelationAggregateInput
}

input CinemaOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoomOrderByRelationAggregateInput {
  _count: SortOrder
}

input SeatOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookingItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShowingWhereUniqueInput {
  id: String
}

enum ShowingScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  RoomId
  FilmId
  startDate
  endDate
}

input SeatOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  position: SortOrder
  room: RoomOrderByWithRelationInput
  RoomId: SortOrder
  BookingItem: BookingItemOrderByRelationAggregateInput
}

input SeatWhereUniqueInput {
  id: String
}

enum SeatScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  name
  position
  RoomId
}

input RoomWhereUniqueInput {
  id: String
}

enum RoomScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  name
  CinemaId
}

input PromotionOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  code: SortOrder
  discount: SortOrder
  maxDiscount: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  Booking: BookingOrderByRelationAggregateInput
}

input PromotionWhereUniqueInput {
  id: String
}

enum PromotionScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  code
  discount
  maxDiscount
  startDate
  endDate
}

input BookingItemOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  seat: SeatOrderByWithRelationInput
  SeatId: SortOrder
  showing: ShowingOrderByWithRelationInput
  ShowingId: SortOrder
  price: SortOrder
  Booking: BookingOrderByRelationAggregateInput
}

input BookingItemWhereUniqueInput {
  id: String
}

enum BookingItemScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  SeatId
  ShowingId
  price
}

input BookingOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  user: UserOrderByWithRelationInput
  UserId: SortOrder
  amount: SortOrder
  price: SortOrder
  bookingItem: BookingItemOrderByWithRelationInput
  BookingItemId: SortOrder
  promotion: PromotionOrderByWithRelationInput
  PromotionId: SortOrder
}

input BookingWhereUniqueInput {
  id: String
}

enum BookingScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  UserId
  amount
  price
  BookingItemId
  PromotionId
}

type Mutation {
  signup(user: UserCreateInput!): Boolean!
  createUser(user: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): Boolean!
  deleteUser(where: UserWhereUniqueInput!): Boolean!
  login(userInput: LoginUserInput!): LoginResponse!
  createFilmRecord(data: FilmCreateInput!): Film!
  updateFilmRecord(data: FilmUpdateInput!, where: FilmWhereUniqueInput!): Film!
  deleteFilmRecord(where: FilmWhereUniqueInput!): Boolean!
  createShowing(data: ShowingCreateInput!): Showing!
  updateShowing(data: ShowingUpdateInput!, where: ShowingWhereUniqueInput!): Showing!
  deleteShowing(where: ShowingWhereUniqueInput!): Boolean!
  createSeat(data: SeatCreateInput!): Seat!
  updateSeat(data: SeatUpdateInput!, where: SeatWhereUniqueInput!): Seat!
  deleteSeat(where: SeatWhereUniqueInput!): Boolean!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Boolean!
  createPromotion(data: PromotionCreateInput!): Promotion!
  updatePromotion(data: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion!
  deletePromotion(where: PromotionWhereUniqueInput!): Boolean!
  createBookingItem(data: BookingItemCreateInput!): BookingItem!
  updateBookingItem(data: BookingItemUpdateInput!, where: BookingItemWhereUniqueInput!): BookingItem!
  deleteBookingItem(where: BookingItemWhereUniqueInput!): Boolean!
  createBookingRecord(data: BookingCreateInput!): Booking!
  updateBookingRecord(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking!
  deleteBookingRecord(where: BookingWhereUniqueInput!): Boolean!
}

input UserCreateInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  Booking: BookingCreateNestedManyWithoutUserInput
}

input BookingCreateNestedManyWithoutUserInput {
  create: [BookingCreateWithoutUserInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutUserInput!]
  createMany: BookingCreateManyUserInputEnvelope
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedOneWithoutBookingInput!
  promotion: PromotionCreateNestedOneWithoutBookingInput!
}

input BookingItemCreateNestedOneWithoutBookingInput {
  create: BookingItemCreateWithoutBookingInput
  connectOrCreate: BookingItemCreateOrConnectWithoutBookingInput
  connect: BookingItemWhereUniqueInput
}

input BookingItemCreateWithoutBookingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
  price: Int!
}

input SeatCreateNestedOneWithoutBookingItemInput {
  create: SeatCreateWithoutBookingItemInput
  connectOrCreate: SeatCreateOrConnectWithoutBookingItemInput
  connect: SeatWhereUniqueInput
}

input SeatCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: RoomCreateNestedOneWithoutSeatInput!
}

input RoomCreateNestedOneWithoutSeatInput {
  create: RoomCreateWithoutSeatInput
  connectOrCreate: RoomCreateOrConnectWithoutSeatInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutSeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Showing: ShowingCreateNestedManyWithoutRoomInput
}

input CinemaCreateNestedOneWithoutRoomInput {
  create: CinemaCreateWithoutRoomInput
  connectOrCreate: CinemaCreateOrConnectWithoutRoomInput
  connect: CinemaWhereUniqueInput
}

input CinemaCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  address: String!
  phone: String!
  clusterCinema: ClusterCinemaCreateNestedOneWithoutCinemaInput!
}

input ClusterCinemaCreateNestedOneWithoutCinemaInput {
  create: ClusterCinemaCreateWithoutCinemaInput
  connectOrCreate: ClusterCinemaCreateOrConnectWithoutCinemaInput
  connect: ClusterCinemaWhereUniqueInput
}

input ClusterCinemaCreateWithoutCinemaInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  phone: String!
}

input ClusterCinemaCreateOrConnectWithoutCinemaInput {
  where: ClusterCinemaWhereUniqueInput!
  create: ClusterCinemaCreateWithoutCinemaInput!
}

input ClusterCinemaWhereUniqueInput {
  id: String
}

input CinemaCreateOrConnectWithoutRoomInput {
  where: CinemaWhereUniqueInput!
  create: CinemaCreateWithoutRoomInput!
}

input CinemaWhereUniqueInput {
  id: String
}

input ShowingCreateNestedManyWithoutRoomInput {
  create: [ShowingCreateWithoutRoomInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutRoomInput!]
  createMany: ShowingCreateManyRoomInputEnvelope
  connect: [ShowingWhereUniqueInput!]
}

input ShowingCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  film: FilmCreateNestedOneWithoutShowingInput!
  startDate: DateTime!
  endDate: DateTime!
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input FilmCreateNestedOneWithoutShowingInput {
  create: FilmCreateWithoutShowingInput
  connectOrCreate: FilmCreateOrConnectWithoutShowingInput
  connect: FilmWhereUniqueInput
}

input FilmCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: String
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
}

input FilmCreateOrConnectWithoutShowingInput {
  where: FilmWhereUniqueInput!
  create: FilmCreateWithoutShowingInput!
}

input BookingItemCreateNestedManyWithoutShowingInput {
  create: [BookingItemCreateWithoutShowingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutShowingInput!]
  createMany: BookingItemCreateManyShowingInputEnvelope
  connect: [BookingItemWhereUniqueInput!]
}

input BookingItemCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  price: Int!
  Booking: BookingCreateNestedManyWithoutBookingItemInput
}

input BookingCreateNestedManyWithoutBookingItemInput {
  create: [BookingCreateWithoutBookingItemInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutBookingItemInput!]
  createMany: BookingCreateManyBookingItemInputEnvelope
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  promotion: PromotionCreateNestedOneWithoutBookingInput!
}

input UserCreateNestedOneWithoutBookingInput {
  create: UserCreateWithoutBookingInput
  connectOrCreate: UserCreateOrConnectWithoutBookingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookingInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
}

input UserCreateOrConnectWithoutBookingInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutBookingInput!
}

input PromotionCreateNestedOneWithoutBookingInput {
  create: PromotionCreateWithoutBookingInput
  connectOrCreate: PromotionCreateOrConnectWithoutBookingInput
  connect: PromotionWhereUniqueInput
}

input PromotionCreateWithoutBookingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime!
  endDate: DateTime!
}

input PromotionCreateOrConnectWithoutBookingInput {
  where: PromotionWhereUniqueInput!
  create: PromotionCreateWithoutBookingInput!
}

input BookingCreateOrConnectWithoutBookingItemInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutBookingItemInput!
}

input BookingCreateManyBookingItemInputEnvelope {
  data: [BookingCreateManyBookingItemInput!]!
  skipDuplicates: Boolean
}

input BookingCreateManyBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  UserId: String!
  amount: Int!
  price: Int!
  PromotionId: String!
}

input BookingItemCreateOrConnectWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutShowingInput!
}

input BookingItemCreateManyShowingInputEnvelope {
  data: [BookingItemCreateManyShowingInput!]!
  skipDuplicates: Boolean
}

input BookingItemCreateManyShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  SeatId: String!
  price: Int!
}

input ShowingCreateOrConnectWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutRoomInput!
}

input ShowingCreateManyRoomInputEnvelope {
  data: [ShowingCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input ShowingCreateManyRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  FilmId: String!
  startDate: DateTime!
  endDate: DateTime!
}

input RoomCreateOrConnectWithoutSeatInput {
  where: RoomWhereUniqueInput!
  create: RoomCreateWithoutSeatInput!
}

input SeatCreateOrConnectWithoutBookingItemInput {
  where: SeatWhereUniqueInput!
  create: SeatCreateWithoutBookingItemInput!
}

input ShowingCreateNestedOneWithoutBookingItemInput {
  create: ShowingCreateWithoutBookingItemInput
  connectOrCreate: ShowingCreateOrConnectWithoutBookingItemInput
  connect: ShowingWhereUniqueInput
}

input ShowingCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  film: FilmCreateNestedOneWithoutShowingInput!
  startDate: DateTime!
  endDate: DateTime!
}

input RoomCreateNestedOneWithoutShowingInput {
  create: RoomCreateWithoutShowingInput
  connectOrCreate: RoomCreateOrConnectWithoutShowingInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Seat: SeatCreateNestedManyWithoutRoomInput
}

input SeatCreateNestedManyWithoutRoomInput {
  create: [SeatCreateWithoutRoomInput!]
  connectOrCreate: [SeatCreateOrConnectWithoutRoomInput!]
  createMany: SeatCreateManyRoomInputEnvelope
  connect: [SeatWhereUniqueInput!]
}

input SeatCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  BookingItem: BookingItemCreateNestedManyWithoutSeatInput
}

input BookingItemCreateNestedManyWithoutSeatInput {
  create: [BookingItemCreateWithoutSeatInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutSeatInput!]
  createMany: BookingItemCreateManySeatInputEnvelope
  connect: [BookingItemWhereUniqueInput!]
}

input BookingItemCreateWithoutSeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
  price: Int!
  Booking: BookingCreateNestedManyWithoutBookingItemInput
}

input BookingItemCreateOrConnectWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutSeatInput!
}

input BookingItemCreateManySeatInputEnvelope {
  data: [BookingItemCreateManySeatInput!]!
  skipDuplicates: Boolean
}

input BookingItemCreateManySeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  ShowingId: String!
  price: Int!
}

input SeatCreateOrConnectWithoutRoomInput {
  where: SeatWhereUniqueInput!
  create: SeatCreateWithoutRoomInput!
}

input SeatCreateManyRoomInputEnvelope {
  data: [SeatCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input SeatCreateManyRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
}

input RoomCreateOrConnectWithoutShowingInput {
  where: RoomWhereUniqueInput!
  create: RoomCreateWithoutShowingInput!
}

input ShowingCreateOrConnectWithoutBookingItemInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutBookingItemInput!
}

input BookingItemCreateOrConnectWithoutBookingInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutBookingInput!
}

input BookingCreateOrConnectWithoutUserInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutUserInput!
}

input BookingCreateManyUserInputEnvelope {
  data: [BookingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BookingCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  amount: Int!
  price: Int!
  BookingItemId: String!
  PromotionId: String!
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
  point: NullableIntFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutUserInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BookingUpdateManyWithoutUserInput {
  create: [BookingCreateWithoutUserInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutUserInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutUserInput!]
  createMany: BookingCreateManyUserInputEnvelope
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BookingUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [BookingScalarWhereInput!]
}

input BookingUpsertWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutUserInput!
  create: BookingCreateWithoutUserInput!
}

input BookingUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateOneRequiredWithoutBookingInput
  promotion: PromotionUpdateOneRequiredWithoutBookingInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BookingItemUpdateOneRequiredWithoutBookingInput {
  create: BookingItemCreateWithoutBookingInput
  connectOrCreate: BookingItemCreateOrConnectWithoutBookingInput
  upsert: BookingItemUpsertWithoutBookingInput
  connect: BookingItemWhereUniqueInput
  update: BookingItemUpdateWithoutBookingInput
}

input BookingItemUpsertWithoutBookingInput {
  update: BookingItemUpdateWithoutBookingInput!
  create: BookingItemCreateWithoutBookingInput!
}

input BookingItemUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
  price: IntFieldUpdateOperationsInput
}

input SeatUpdateOneRequiredWithoutBookingItemInput {
  create: SeatCreateWithoutBookingItemInput
  connectOrCreate: SeatCreateOrConnectWithoutBookingItemInput
  upsert: SeatUpsertWithoutBookingItemInput
  connect: SeatWhereUniqueInput
  update: SeatUpdateWithoutBookingItemInput
}

input SeatUpsertWithoutBookingItemInput {
  update: SeatUpdateWithoutBookingItemInput!
  create: SeatCreateWithoutBookingItemInput!
}

input SeatUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutSeatInput
}

input RoomUpdateOneRequiredWithoutSeatInput {
  create: RoomCreateWithoutSeatInput
  connectOrCreate: RoomCreateOrConnectWithoutSeatInput
  upsert: RoomUpsertWithoutSeatInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutSeatInput
}

input RoomUpsertWithoutSeatInput {
  update: RoomUpdateWithoutSeatInput!
  create: RoomCreateWithoutSeatInput!
}

input RoomUpdateWithoutSeatInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Showing: ShowingUpdateManyWithoutRoomInput
}

input CinemaUpdateOneRequiredWithoutRoomInput {
  create: CinemaCreateWithoutRoomInput
  connectOrCreate: CinemaCreateOrConnectWithoutRoomInput
  upsert: CinemaUpsertWithoutRoomInput
  connect: CinemaWhereUniqueInput
  update: CinemaUpdateWithoutRoomInput
}

input CinemaUpsertWithoutRoomInput {
  update: CinemaUpdateWithoutRoomInput!
  create: CinemaCreateWithoutRoomInput!
}

input CinemaUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  clusterCinema: ClusterCinemaUpdateOneRequiredWithoutCinemaInput
}

input ClusterCinemaUpdateOneRequiredWithoutCinemaInput {
  create: ClusterCinemaCreateWithoutCinemaInput
  connectOrCreate: ClusterCinemaCreateOrConnectWithoutCinemaInput
  upsert: ClusterCinemaUpsertWithoutCinemaInput
  connect: ClusterCinemaWhereUniqueInput
  update: ClusterCinemaUpdateWithoutCinemaInput
}

input ClusterCinemaUpsertWithoutCinemaInput {
  update: ClusterCinemaUpdateWithoutCinemaInput!
  create: ClusterCinemaCreateWithoutCinemaInput!
}

input ClusterCinemaUpdateWithoutCinemaInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
}

input ShowingUpdateManyWithoutRoomInput {
  create: [ShowingCreateWithoutRoomInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutRoomInput!]
  upsert: [ShowingUpsertWithWhereUniqueWithoutRoomInput!]
  createMany: ShowingCreateManyRoomInputEnvelope
  set: [ShowingWhereUniqueInput!]
  disconnect: [ShowingWhereUniqueInput!]
  delete: [ShowingWhereUniqueInput!]
  connect: [ShowingWhereUniqueInput!]
  update: [ShowingUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [ShowingUpdateManyWithWhereWithoutRoomInput!]
  deleteMany: [ShowingScalarWhereInput!]
}

input ShowingUpsertWithWhereUniqueWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  update: ShowingUpdateWithoutRoomInput!
  create: ShowingCreateWithoutRoomInput!
}

input ShowingUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input FilmUpdateOneRequiredWithoutShowingInput {
  create: FilmCreateWithoutShowingInput
  connectOrCreate: FilmCreateOrConnectWithoutShowingInput
  upsert: FilmUpsertWithoutShowingInput
  connect: FilmWhereUniqueInput
  update: FilmUpdateWithoutShowingInput
}

input FilmUpsertWithoutShowingInput {
  update: FilmUpdateWithoutShowingInput!
  create: FilmCreateWithoutShowingInput!
}

input FilmUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  trailler: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  director: NullableStringFieldUpdateOperationsInput
  actor: NullableStringFieldUpdateOperationsInput
  time: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageDescription1: NullableStringFieldUpdateOperationsInput
  imageDescription2: NullableStringFieldUpdateOperationsInput
  imageDescription3: NullableStringFieldUpdateOperationsInput
}

input BookingItemUpdateManyWithoutShowingInput {
  create: [BookingItemCreateWithoutShowingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutShowingInput!]
  upsert: [BookingItemUpsertWithWhereUniqueWithoutShowingInput!]
  createMany: BookingItemCreateManyShowingInputEnvelope
  set: [BookingItemWhereUniqueInput!]
  disconnect: [BookingItemWhereUniqueInput!]
  delete: [BookingItemWhereUniqueInput!]
  connect: [BookingItemWhereUniqueInput!]
  update: [BookingItemUpdateWithWhereUniqueWithoutShowingInput!]
  updateMany: [BookingItemUpdateManyWithWhereWithoutShowingInput!]
  deleteMany: [BookingItemScalarWhereInput!]
}

input BookingItemUpsertWithWhereUniqueWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  update: BookingItemUpdateWithoutShowingInput!
  create: BookingItemCreateWithoutShowingInput!
}

input BookingItemUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  price: IntFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutBookingItemInput
}

input BookingUpdateManyWithoutBookingItemInput {
  create: [BookingCreateWithoutBookingItemInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutBookingItemInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutBookingItemInput!]
  createMany: BookingCreateManyBookingItemInputEnvelope
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutBookingItemInput!]
  updateMany: [BookingUpdateManyWithWhereWithoutBookingItemInput!]
  deleteMany: [BookingScalarWhereInput!]
}

input BookingUpsertWithWhereUniqueWithoutBookingItemInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookingItemInput!
  create: BookingCreateWithoutBookingItemInput!
}

input BookingUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  promotion: PromotionUpdateOneRequiredWithoutBookingInput
}

input UserUpdateOneRequiredWithoutBookingInput {
  create: UserCreateWithoutBookingInput
  connectOrCreate: UserCreateOrConnectWithoutBookingInput
  upsert: UserUpsertWithoutBookingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBookingInput
}

input UserUpsertWithoutBookingInput {
  update: UserUpdateWithoutBookingInput!
  create: UserCreateWithoutBookingInput!
}

input UserUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
  point: NullableIntFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
}

input PromotionUpdateOneRequiredWithoutBookingInput {
  create: PromotionCreateWithoutBookingInput
  connectOrCreate: PromotionCreateOrConnectWithoutBookingInput
  upsert: PromotionUpsertWithoutBookingInput
  connect: PromotionWhereUniqueInput
  update: PromotionUpdateWithoutBookingInput
}

input PromotionUpsertWithoutBookingInput {
  update: PromotionUpdateWithoutBookingInput!
  create: PromotionCreateWithoutBookingInput!
}

input PromotionUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  maxDiscount: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input BookingUpdateWithWhereUniqueWithoutBookingItemInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookingItemInput!
}

input BookingUpdateManyWithWhereWithoutBookingItemInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyMutationInput!
}

input BookingScalarWhereInput {
  AND: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
  NOT: [BookingScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  UserId: StringFilter
  amount: IntFilter
  price: IntFilter
  BookingItemId: StringFilter
  PromotionId: StringFilter
}

input BookingUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
}

input BookingItemUpdateWithWhereUniqueWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  data: BookingItemUpdateWithoutShowingInput!
}

input BookingItemUpdateManyWithWhereWithoutShowingInput {
  where: BookingItemScalarWhereInput!
  data: BookingItemUpdateManyMutationInput!
}

input BookingItemScalarWhereInput {
  AND: [BookingItemScalarWhereInput!]
  OR: [BookingItemScalarWhereInput!]
  NOT: [BookingItemScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  SeatId: StringFilter
  ShowingId: StringFilter
  price: IntFilter
}

input BookingItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
}

input ShowingUpdateWithWhereUniqueWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  data: ShowingUpdateWithoutRoomInput!
}

input ShowingUpdateManyWithWhereWithoutRoomInput {
  where: ShowingScalarWhereInput!
  data: ShowingUpdateManyMutationInput!
}

input ShowingScalarWhereInput {
  AND: [ShowingScalarWhereInput!]
  OR: [ShowingScalarWhereInput!]
  NOT: [ShowingScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  RoomId: StringFilter
  FilmId: StringFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
}

input ShowingUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
}

input ShowingUpdateOneRequiredWithoutBookingItemInput {
  create: ShowingCreateWithoutBookingItemInput
  connectOrCreate: ShowingCreateOrConnectWithoutBookingItemInput
  upsert: ShowingUpsertWithoutBookingItemInput
  connect: ShowingWhereUniqueInput
  update: ShowingUpdateWithoutBookingItemInput
}

input ShowingUpsertWithoutBookingItemInput {
  update: ShowingUpdateWithoutBookingItemInput!
  create: ShowingCreateWithoutBookingItemInput!
}

input ShowingUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
}

input RoomUpdateOneRequiredWithoutShowingInput {
  create: RoomCreateWithoutShowingInput
  connectOrCreate: RoomCreateOrConnectWithoutShowingInput
  upsert: RoomUpsertWithoutShowingInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutShowingInput
}

input RoomUpsertWithoutShowingInput {
  update: RoomUpdateWithoutShowingInput!
  create: RoomCreateWithoutShowingInput!
}

input RoomUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Seat: SeatUpdateManyWithoutRoomInput
}

input SeatUpdateManyWithoutRoomInput {
  create: [SeatCreateWithoutRoomInput!]
  connectOrCreate: [SeatCreateOrConnectWithoutRoomInput!]
  upsert: [SeatUpsertWithWhereUniqueWithoutRoomInput!]
  createMany: SeatCreateManyRoomInputEnvelope
  set: [SeatWhereUniqueInput!]
  disconnect: [SeatWhereUniqueInput!]
  delete: [SeatWhereUniqueInput!]
  connect: [SeatWhereUniqueInput!]
  update: [SeatUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [SeatUpdateManyWithWhereWithoutRoomInput!]
  deleteMany: [SeatScalarWhereInput!]
}

input SeatUpsertWithWhereUniqueWithoutRoomInput {
  where: SeatWhereUniqueInput!
  update: SeatUpdateWithoutRoomInput!
  create: SeatCreateWithoutRoomInput!
}

input SeatUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutSeatInput
}

input BookingItemUpdateManyWithoutSeatInput {
  create: [BookingItemCreateWithoutSeatInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutSeatInput!]
  upsert: [BookingItemUpsertWithWhereUniqueWithoutSeatInput!]
  createMany: BookingItemCreateManySeatInputEnvelope
  set: [BookingItemWhereUniqueInput!]
  disconnect: [BookingItemWhereUniqueInput!]
  delete: [BookingItemWhereUniqueInput!]
  connect: [BookingItemWhereUniqueInput!]
  update: [BookingItemUpdateWithWhereUniqueWithoutSeatInput!]
  updateMany: [BookingItemUpdateManyWithWhereWithoutSeatInput!]
  deleteMany: [BookingItemScalarWhereInput!]
}

input BookingItemUpsertWithWhereUniqueWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  update: BookingItemUpdateWithoutSeatInput!
  create: BookingItemCreateWithoutSeatInput!
}

input BookingItemUpdateWithoutSeatInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
  price: IntFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutBookingItemInput
}

input BookingItemUpdateWithWhereUniqueWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  data: BookingItemUpdateWithoutSeatInput!
}

input BookingItemUpdateManyWithWhereWithoutSeatInput {
  where: BookingItemScalarWhereInput!
  data: BookingItemUpdateManyMutationInput!
}

input SeatUpdateWithWhereUniqueWithoutRoomInput {
  where: SeatWhereUniqueInput!
  data: SeatUpdateWithoutRoomInput!
}

input SeatUpdateManyWithWhereWithoutRoomInput {
  where: SeatScalarWhereInput!
  data: SeatUpdateManyMutationInput!
}

input SeatScalarWhereInput {
  AND: [SeatScalarWhereInput!]
  OR: [SeatScalarWhereInput!]
  NOT: [SeatScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  position: StringFilter
  RoomId: StringFilter
}

input SeatUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
}

input BookingUpdateWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutUserInput!
}

input BookingUpdateManyWithWhereWithoutUserInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyMutationInput!
}

input LoginUserInput {
  id: String
  username: String!
  password: String!
}

input FilmCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: String
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  Showing: ShowingCreateNestedManyWithoutFilmInput
}

input ShowingCreateNestedManyWithoutFilmInput {
  create: [ShowingCreateWithoutFilmInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutFilmInput!]
  createMany: ShowingCreateManyFilmInputEnvelope
  connect: [ShowingWhereUniqueInput!]
}

input ShowingCreateWithoutFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  startDate: DateTime!
  endDate: DateTime!
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input ShowingCreateOrConnectWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutFilmInput!
}

input ShowingCreateManyFilmInputEnvelope {
  data: [ShowingCreateManyFilmInput!]!
  skipDuplicates: Boolean
}

input ShowingCreateManyFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  RoomId: String!
  startDate: DateTime!
  endDate: DateTime!
}

input FilmUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  trailler: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  director: NullableStringFieldUpdateOperationsInput
  actor: NullableStringFieldUpdateOperationsInput
  time: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageDescription1: NullableStringFieldUpdateOperationsInput
  imageDescription2: NullableStringFieldUpdateOperationsInput
  imageDescription3: NullableStringFieldUpdateOperationsInput
  Showing: ShowingUpdateManyWithoutFilmInput
}

input ShowingUpdateManyWithoutFilmInput {
  create: [ShowingCreateWithoutFilmInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutFilmInput!]
  upsert: [ShowingUpsertWithWhereUniqueWithoutFilmInput!]
  createMany: ShowingCreateManyFilmInputEnvelope
  set: [ShowingWhereUniqueInput!]
  disconnect: [ShowingWhereUniqueInput!]
  delete: [ShowingWhereUniqueInput!]
  connect: [ShowingWhereUniqueInput!]
  update: [ShowingUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [ShowingUpdateManyWithWhereWithoutFilmInput!]
  deleteMany: [ShowingScalarWhereInput!]
}

input ShowingUpsertWithWhereUniqueWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  update: ShowingUpdateWithoutFilmInput!
  create: ShowingCreateWithoutFilmInput!
}

input ShowingUpdateWithoutFilmInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input ShowingUpdateWithWhereUniqueWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  data: ShowingUpdateWithoutFilmInput!
}

input ShowingUpdateManyWithWhereWithoutFilmInput {
  where: ShowingScalarWhereInput!
  data: ShowingUpdateManyMutationInput!
}

input ShowingCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  film: FilmCreateNestedOneWithoutShowingInput!
  startDate: DateTime!
  endDate: DateTime!
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input ShowingUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input SeatCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: RoomCreateNestedOneWithoutSeatInput!
  BookingItem: BookingItemCreateNestedManyWithoutSeatInput
}

input SeatUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutSeatInput
  BookingItem: BookingItemUpdateManyWithoutSeatInput
}

input RoomCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Seat: SeatCreateNestedManyWithoutRoomInput
  Showing: ShowingCreateNestedManyWithoutRoomInput
}

input RoomUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Seat: SeatUpdateManyWithoutRoomInput
  Showing: ShowingUpdateManyWithoutRoomInput
}

input PromotionCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime!
  endDate: DateTime!
  Booking: BookingCreateNestedManyWithoutPromotionInput
}

input BookingCreateNestedManyWithoutPromotionInput {
  create: [BookingCreateWithoutPromotionInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutPromotionInput!]
  createMany: BookingCreateManyPromotionInputEnvelope
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutPromotionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedOneWithoutBookingInput!
}

input BookingCreateOrConnectWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutPromotionInput!
}

input BookingCreateManyPromotionInputEnvelope {
  data: [BookingCreateManyPromotionInput!]!
  skipDuplicates: Boolean
}

input BookingCreateManyPromotionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  UserId: String!
  amount: Int!
  price: Int!
  BookingItemId: String!
}

input PromotionUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  maxDiscount: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutPromotionInput
}

input BookingUpdateManyWithoutPromotionInput {
  create: [BookingCreateWithoutPromotionInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutPromotionInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutPromotionInput!]
  createMany: BookingCreateManyPromotionInputEnvelope
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutPromotionInput!]
  updateMany: [BookingUpdateManyWithWhereWithoutPromotionInput!]
  deleteMany: [BookingScalarWhereInput!]
}

input BookingUpsertWithWhereUniqueWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPromotionInput!
  create: BookingCreateWithoutPromotionInput!
}

input BookingUpdateWithoutPromotionInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateOneRequiredWithoutBookingInput
}

input BookingUpdateWithWhereUniqueWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPromotionInput!
}

input BookingUpdateManyWithWhereWithoutPromotionInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyMutationInput!
}

input BookingItemCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
  price: Int!
  Booking: BookingCreateNestedManyWithoutBookingItemInput
}

input BookingItemUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
  price: IntFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutBookingItemInput
}

input BookingCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedOneWithoutBookingInput!
  promotion: PromotionCreateNestedOneWithoutBookingInput!
}

input BookingUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateOneRequiredWithoutBookingInput
  promotion: PromotionUpdateOneRequiredWithoutBookingInput
}