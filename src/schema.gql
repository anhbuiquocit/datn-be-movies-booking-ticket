# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ClusterCinemaCount {
  Cinema: Int!
}

type ClusterCinema {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  phone: String!
  Cinema: [Cinema!]
  _count: ClusterCinemaCount!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CinemaCount {
  Room: Int!
}

type Cinema {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  address: String!
  phone: String!
  clusterCinema: ClusterCinema!
  ClusterCinemaId: String!
  Room: [Room!]
  _count: CinemaCount!
}

type ReviewFilm {
  id: ID!
  user: User!
  userId: String!
  film: Film!
  filmId: String!
  comment: String
}

type ActorCount {
  ActorOnFilm: Int!
}

type Actor {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  birthday: DateTime
  description: String
  image: String
  ActorOnFilm: [ActorOnFilm!]
  _count: ActorCount!
}

type ActorOnFilm {
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  actor: Actor!
  actorId: String!
  film: Film!
  filmId: String!
}

type CategoryCount {
  Film: Int!
}

type Category {
  id: ID!
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  name: String!
  description: String
  Film: [Film!]
  _count: CategoryCount!
}

type FilmCount {
  Showing: Int!
  ReviewFilm: Int!
  ActorOnFilm: Int!
}

type Film {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  Showing: [Showing!]
  ReviewFilm: [ReviewFilm!]
  ActorOnFilm: [ActorOnFilm!]
  Category: Category
  categoryId: String
  _count: FilmCount!
}

type ShowingCount {
  BookingItem: Int!
}

type Showing {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  room: Room!
  RoomId: String!
  film: Film!
  FilmId: String!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  BookingItem: [BookingItem!]
  _count: ShowingCount!
}

type RoomCount {
  Seat: Int!
  Showing: Int!
}

type Room {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: Cinema!
  CinemaId: String!
  Seat: [Seat!]
  Showing: [Showing!]
  _count: RoomCount!
}

type SeatCount {
  BookingItem: Int!
}

type Seat {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: Room!
  RoomId: String!
  BookingItem: [BookingItem!]
  _count: SeatCount!
}

type BookingItem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  seat: Seat!
  SeatId: String!
  showing: Showing!
  ShowingId: String!
  Booking: Booking!
  bookingId: String!
}

type PromotionCount {
  Booking: Int!
}

type Promotion {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  Booking: [Booking!]
  _count: PromotionCount!
}

type BookingCount {
  bookingItem: Int!
}

type Booking {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  deletedAt: DateTime
  user: User!
  UserId: String!
  amount: Int!
  price: Int!
  bookingItem: [BookingItem!]
  promotion: Promotion
  PromotionId: String
  isPayment: Boolean
  lineSeatMatrix: String
  _count: BookingCount!
}

type UserCount {
  Booking: Int!
  ReviewFilm: Int!
}

type User {
  id: ID!
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  Booking: [Booking!]
  ReviewFilm: [ReviewFilm!]
  _count: UserCount!
}

type UserCountAggregate {
  id: Int!
  createAt: Int!
  updateAt: Int!
  deleteAt: Int!
  image: Int!
  firstname: Int!
  lastname: Int!
  birthday: Int!
  address: Int!
  email: Int!
  password: Int!
  username: Int!
  active: Int!
  point: Int!
  phone: Int!
  role: Int!
  _all: Int!
}

type UserAvgAggregate {
  point: Float
}

type UserSumAggregate {
  point: Int
}

type UserMinAggregate {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String
  password: String
  username: String
  active: Boolean
  point: Int
  phone: String
  role: String
}

type UserMaxAggregate {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String
  password: String
  username: String
  active: Boolean
  point: Int
  phone: String
  role: String
}

type AggregateUser {
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type LoginResponse {
  access_token: String!
  user: User!
}

type Admin {
  id: ID!
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  image: String
  password: String!
  username: String!
  phone: String
  role: String
}

type AdminLoginResponse {
  access_token: String!
  admin: Admin!
}

type FilmCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  trailler: Int!
  name: Int!
  description: Int!
  director: Int!
  actor: Int!
  time: Int!
  image: Int!
  imageDescription1: Int!
  imageDescription2: Int!
  imageDescription3: Int!
  categoryId: Int!
  _all: Int!
}

type FilmAvgAggregate {
  time: Float
}

type FilmSumAggregate {
  time: Int
}

type FilmMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String
  name: String
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  categoryId: String
}

type FilmMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String
  name: String
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  categoryId: String
}

type AggregateFilm {
  _count: FilmCountAggregate
  _avg: FilmAvgAggregate
  _sum: FilmSumAggregate
  _min: FilmMinAggregate
  _max: FilmMaxAggregate
}

type ShowingCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  RoomId: Int!
  FilmId: Int!
  price: Int!
  startDate: Int!
  endDate: Int!
  startTime: Int!
  endTime: Int!
  _all: Int!
}

type ShowingAvgAggregate {
  price: Float
}

type ShowingSumAggregate {
  price: Int
}

type ShowingMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  RoomId: String
  FilmId: String
  price: Int
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

type ShowingMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  RoomId: String
  FilmId: String
  price: Int
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

type AggregateShowing {
  _count: ShowingCountAggregate
  _avg: ShowingAvgAggregate
  _sum: ShowingSumAggregate
  _min: ShowingMinAggregate
  _max: ShowingMaxAggregate
}

type PromotionCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  code: Int!
  discount: Int!
  maxDiscount: Int!
  startDate: Int!
  endDate: Int!
  startTime: Int!
  endTime: Int!
  _all: Int!
}

type PromotionAvgAggregate {
  discount: Float
  maxDiscount: Float
}

type PromotionSumAggregate {
  discount: Float
  maxDiscount: Float
}

type PromotionMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String
  discount: Float
  maxDiscount: Float
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

type PromotionMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String
  discount: Float
  maxDiscount: Float
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

type AggregatePromotion {
  _count: PromotionCountAggregate
  _avg: PromotionAvgAggregate
  _sum: PromotionSumAggregate
  _min: PromotionMinAggregate
  _max: PromotionMaxAggregate
}

type Query {
  UsersConnection(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  UserAggregate(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, _count: UserCountAggregateInput, _avg: UserAvgAggregateInput, _sum: UserSumAggregateInput, _min: UserMinAggregateInput, _max: UserMaxAggregateInput): AggregateUser!
  queryMe: User!
  adminQueryMe: Admin!
  films(where: FilmWhereInput, orderBy: [FilmOrderByWithRelationInput!], cursor: FilmWhereUniqueInput, take: Int, skip: Int, distinct: [FilmScalarFieldEnum!]): [Film!]!
  film(where: FilmWhereUniqueInput!): Film!
  filmAggregate(where: FilmWhereInput, orderBy: [FilmOrderByWithRelationInput!], cursor: FilmWhereUniqueInput, take: Int, skip: Int, _count: FilmCountAggregateInput, _avg: FilmAvgAggregateInput, _sum: FilmSumAggregateInput, _min: FilmMinAggregateInput, _max: FilmMaxAggregateInput): AggregateFilm!
  reviewFilmsConnection(where: ReviewFilmWhereInput, orderBy: [ReviewFilmOrderByWithRelationInput!], cursor: ReviewFilmWhereUniqueInput, take: Int, skip: Int, distinct: [ReviewFilmScalarFieldEnum!]): [ReviewFilm!]!
  showingConnection(where: ShowingWhereInput, orderBy: [ShowingOrderByWithRelationInput!], cursor: ShowingWhereUniqueInput, take: Int, skip: Int, distinct: [ShowingScalarFieldEnum!]): [Showing!]!
  ShowingAggregate(where: ShowingWhereInput, orderBy: [ShowingOrderByWithRelationInput!], cursor: ShowingWhereUniqueInput, take: Int, skip: Int, _count: ShowingCountAggregateInput, _avg: ShowingAvgAggregateInput, _sum: ShowingSumAggregateInput, _min: ShowingMinAggregateInput, _max: ShowingMaxAggregateInput): AggregateShowing!
  seatConnection(where: SeatWhereInput, orderBy: [SeatOrderByWithRelationInput!], cursor: SeatWhereUniqueInput, take: Int, skip: Int, distinct: [SeatScalarFieldEnum!]): [Seat!]!
  roomConnection(where: RoomWhereInput, orderBy: [RoomOrderByWithRelationInput!], cursor: RoomWhereUniqueInput, take: Int, skip: Int, distinct: [RoomScalarFieldEnum!]): [Room!]!
  promotionConnection(where: PromotionWhereInput, orderBy: [PromotionOrderByWithRelationInput!], cursor: PromotionWhereUniqueInput, take: Int, skip: Int, distinct: [PromotionScalarFieldEnum!]): [Promotion!]!
  promotionAggregate(where: PromotionWhereInput, orderBy: [PromotionOrderByWithRelationInput!], cursor: PromotionWhereUniqueInput, take: Int, skip: Int, _count: PromotionCountAggregateInput, _avg: PromotionAvgAggregateInput, _sum: PromotionSumAggregateInput, _min: PromotionMinAggregateInput, _max: PromotionMaxAggregateInput): AggregatePromotion!
  bookingItemConnection(where: BookingItemWhereInput, orderBy: [BookingItemOrderByWithRelationInput!], cursor: BookingItemWhereUniqueInput, take: Int, skip: Int, distinct: [BookingItemScalarFieldEnum!]): [BookingItem!]!
  bookingConnection(where: BookingWhereInput, orderBy: [BookingOrderByWithRelationInput!], cursor: BookingWhereUniqueInput, take: Int, skip: Int, distinct: [BookingScalarFieldEnum!]): [Booking!]!
  createPresignedS3(file: String!): String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createAt: DateTimeNullableFilter
  updateAt: DateTimeNullableFilter
  deleteAt: DateTimeNullableFilter
  image: StringNullableFilter
  firstname: StringNullableFilter
  lastname: StringNullableFilter
  birthday: DateTimeNullableFilter
  address: StringNullableFilter
  email: StringFilter
  password: StringFilter
  username: StringFilter
  active: BoolNullableFilter
  point: IntNullableFilter
  phone: StringNullableFilter
  role: StringNullableFilter
  Booking: BookingListRelationFilter
  ReviewFilm: ReviewFilmListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input BookingListRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  UserId: StringFilter
  amount: IntFilter
  price: IntFilter
  bookingItem: BookingItemListRelationFilter
  promotion: PromotionRelationFilter
  PromotionId: StringNullableFilter
  isPayment: BoolNullableFilter
  lineSeatMatrix: StringNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input BookingItemListRelationFilter {
  every: BookingItemWhereInput
  some: BookingItemWhereInput
  none: BookingItemWhereInput
}

input BookingItemWhereInput {
  AND: [BookingItemWhereInput!]
  OR: [BookingItemWhereInput!]
  NOT: [BookingItemWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  seat: SeatRelationFilter
  SeatId: StringFilter
  showing: ShowingRelationFilter
  ShowingId: StringFilter
  Booking: BookingRelationFilter
  bookingId: StringFilter
}

input SeatRelationFilter {
  is: SeatWhereInput
  isNot: SeatWhereInput
}

input SeatWhereInput {
  AND: [SeatWhereInput!]
  OR: [SeatWhereInput!]
  NOT: [SeatWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  position: StringFilter
  room: RoomRelationFilter
  RoomId: StringFilter
  BookingItem: BookingItemListRelationFilter
}

input RoomRelationFilter {
  is: RoomWhereInput
  isNot: RoomWhereInput
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  cinema: CinemaRelationFilter
  CinemaId: StringFilter
  Seat: SeatListRelationFilter
  Showing: ShowingListRelationFilter
}

input CinemaRelationFilter {
  is: CinemaWhereInput
  isNot: CinemaWhereInput
}

input CinemaWhereInput {
  AND: [CinemaWhereInput!]
  OR: [CinemaWhereInput!]
  NOT: [CinemaWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  address: StringFilter
  phone: StringFilter
  clusterCinema: ClusterCinemaRelationFilter
  ClusterCinemaId: StringFilter
  Room: RoomListRelationFilter
}

input ClusterCinemaRelationFilter {
  is: ClusterCinemaWhereInput
  isNot: ClusterCinemaWhereInput
}

input ClusterCinemaWhereInput {
  AND: [ClusterCinemaWhereInput!]
  OR: [ClusterCinemaWhereInput!]
  NOT: [ClusterCinemaWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  phone: StringFilter
  Cinema: CinemaListRelationFilter
}

input CinemaListRelationFilter {
  every: CinemaWhereInput
  some: CinemaWhereInput
  none: CinemaWhereInput
}

input RoomListRelationFilter {
  every: RoomWhereInput
  some: RoomWhereInput
  none: RoomWhereInput
}

input SeatListRelationFilter {
  every: SeatWhereInput
  some: SeatWhereInput
  none: SeatWhereInput
}

input ShowingListRelationFilter {
  every: ShowingWhereInput
  some: ShowingWhereInput
  none: ShowingWhereInput
}

input ShowingWhereInput {
  AND: [ShowingWhereInput!]
  OR: [ShowingWhereInput!]
  NOT: [ShowingWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  room: RoomRelationFilter
  RoomId: StringFilter
  film: FilmRelationFilter
  FilmId: StringFilter
  price: IntFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  startTime: DateTimeNullableFilter
  endTime: DateTimeNullableFilter
  BookingItem: BookingItemListRelationFilter
}

input FilmRelationFilter {
  is: FilmWhereInput
  isNot: FilmWhereInput
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  trailler: StringFilter
  name: StringFilter
  description: StringNullableFilter
  director: StringNullableFilter
  actor: StringNullableFilter
  time: IntNullableFilter
  image: StringNullableFilter
  imageDescription1: StringNullableFilter
  imageDescription2: StringNullableFilter
  imageDescription3: StringNullableFilter
  Showing: ShowingListRelationFilter
  ReviewFilm: ReviewFilmListRelationFilter
  ActorOnFilm: ActorOnFilmListRelationFilter
  Category: CategoryRelationFilter
  categoryId: StringNullableFilter
}

input ReviewFilmListRelationFilter {
  every: ReviewFilmWhereInput
  some: ReviewFilmWhereInput
  none: ReviewFilmWhereInput
}

input ReviewFilmWhereInput {
  AND: [ReviewFilmWhereInput!]
  OR: [ReviewFilmWhereInput!]
  NOT: [ReviewFilmWhereInput!]
  id: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  film: FilmRelationFilter
  filmId: StringFilter
  comment: StringNullableFilter
}

input ActorOnFilmListRelationFilter {
  every: ActorOnFilmWhereInput
  some: ActorOnFilmWhereInput
  none: ActorOnFilmWhereInput
}

input ActorOnFilmWhereInput {
  AND: [ActorOnFilmWhereInput!]
  OR: [ActorOnFilmWhereInput!]
  NOT: [ActorOnFilmWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  actor: ActorRelationFilter
  actorId: StringFilter
  film: FilmRelationFilter
  filmId: StringFilter
}

input ActorRelationFilter {
  is: ActorWhereInput
  isNot: ActorWhereInput
}

input ActorWhereInput {
  AND: [ActorWhereInput!]
  OR: [ActorWhereInput!]
  NOT: [ActorWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  birthday: DateTimeNullableFilter
  description: StringNullableFilter
  image: StringNullableFilter
  ActorOnFilm: ActorOnFilmListRelationFilter
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: StringFilter
  createAt: DateTimeNullableFilter
  updateAt: DateTimeNullableFilter
  deleteAt: DateTimeNullableFilter
  name: StringFilter
  description: StringNullableFilter
  Film: FilmListRelationFilter
}

input FilmListRelationFilter {
  every: FilmWhereInput
  some: FilmWhereInput
  none: FilmWhereInput
}

input ShowingRelationFilter {
  is: ShowingWhereInput
  isNot: ShowingWhereInput
}

input BookingRelationFilter {
  is: BookingWhereInput
  isNot: BookingWhereInput
}

input PromotionRelationFilter {
  is: PromotionWhereInput
  isNot: PromotionWhereInput
}

input PromotionWhereInput {
  AND: [PromotionWhereInput!]
  OR: [PromotionWhereInput!]
  NOT: [PromotionWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  code: StringFilter
  discount: FloatFilter
  maxDiscount: FloatFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  startTime: DateTimeNullableFilter
  endTime: DateTimeNullableFilter
  Booking: BookingListRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createAt: SortOrder
  updateAt: SortOrder
  deleteAt: SortOrder
  image: SortOrder
  firstname: SortOrder
  lastname: SortOrder
  birthday: SortOrder
  address: SortOrder
  email: SortOrder
  password: SortOrder
  username: SortOrder
  active: SortOrder
  point: SortOrder
  phone: SortOrder
  role: SortOrder
  Booking: BookingOrderByRelationAggregateInput
  ReviewFilm: ReviewFilmOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input BookingOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewFilmOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum UserScalarFieldEnum {
  id
  createAt
  updateAt
  deleteAt
  image
  firstname
  lastname
  birthday
  address
  email
  password
  username
  active
  point
  phone
  role
}

input UserCountAggregateInput {
  id: Boolean
  createAt: Boolean
  updateAt: Boolean
  deleteAt: Boolean
  image: Boolean
  firstname: Boolean
  lastname: Boolean
  birthday: Boolean
  address: Boolean
  email: Boolean
  password: Boolean
  username: Boolean
  active: Boolean
  point: Boolean
  phone: Boolean
  role: Boolean
  _all: Boolean
}

input UserAvgAggregateInput {
  point: Boolean
}

input UserSumAggregateInput {
  point: Boolean
}

input UserMinAggregateInput {
  id: Boolean
  createAt: Boolean
  updateAt: Boolean
  deleteAt: Boolean
  image: Boolean
  firstname: Boolean
  lastname: Boolean
  birthday: Boolean
  address: Boolean
  email: Boolean
  password: Boolean
  username: Boolean
  active: Boolean
  point: Boolean
  phone: Boolean
  role: Boolean
}

input UserMaxAggregateInput {
  id: Boolean
  createAt: Boolean
  updateAt: Boolean
  deleteAt: Boolean
  image: Boolean
  firstname: Boolean
  lastname: Boolean
  birthday: Boolean
  address: Boolean
  email: Boolean
  password: Boolean
  username: Boolean
  active: Boolean
  point: Boolean
  phone: Boolean
  role: Boolean
}

input FilmOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  trailler: SortOrder
  name: SortOrder
  description: SortOrder
  director: SortOrder
  actor: SortOrder
  time: SortOrder
  image: SortOrder
  imageDescription1: SortOrder
  imageDescription2: SortOrder
  imageDescription3: SortOrder
  Showing: ShowingOrderByRelationAggregateInput
  ReviewFilm: ReviewFilmOrderByRelationAggregateInput
  ActorOnFilm: ActorOnFilmOrderByRelationAggregateInput
  Category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
}

input ShowingOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActorOnFilmOrderByRelationAggregateInput {
  _count: SortOrder
}

input CategoryOrderByWithRelationInput {
  id: SortOrder
  createAt: SortOrder
  updateAt: SortOrder
  deleteAt: SortOrder
  name: SortOrder
  description: SortOrder
  Film: FilmOrderByRelationAggregateInput
}

input FilmOrderByRelationAggregateInput {
  _count: SortOrder
}

input FilmWhereUniqueInput {
  id: String
}

enum FilmScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  trailler
  name
  description
  director
  actor
  time
  image
  imageDescription1
  imageDescription2
  imageDescription3
  categoryId
}

input FilmCountAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  trailler: Boolean
  name: Boolean
  description: Boolean
  director: Boolean
  actor: Boolean
  time: Boolean
  image: Boolean
  imageDescription1: Boolean
  imageDescription2: Boolean
  imageDescription3: Boolean
  categoryId: Boolean
  _all: Boolean
}

input FilmAvgAggregateInput {
  time: Boolean
}

input FilmSumAggregateInput {
  time: Boolean
}

input FilmMinAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  trailler: Boolean
  name: Boolean
  description: Boolean
  director: Boolean
  actor: Boolean
  time: Boolean
  image: Boolean
  imageDescription1: Boolean
  imageDescription2: Boolean
  imageDescription3: Boolean
  categoryId: Boolean
}

input FilmMaxAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  trailler: Boolean
  name: Boolean
  description: Boolean
  director: Boolean
  actor: Boolean
  time: Boolean
  image: Boolean
  imageDescription1: Boolean
  imageDescription2: Boolean
  imageDescription3: Boolean
  categoryId: Boolean
}

input ReviewFilmOrderByWithRelationInput {
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  film: FilmOrderByWithRelationInput
  filmId: SortOrder
  comment: SortOrder
}

input ReviewFilmWhereUniqueInput {
  id: String
}

enum ReviewFilmScalarFieldEnum {
  id
  userId
  filmId
  comment
}

input ShowingOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  room: RoomOrderByWithRelationInput
  RoomId: SortOrder
  film: FilmOrderByWithRelationInput
  FilmId: SortOrder
  price: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  startTime: SortOrder
  endTime: SortOrder
  BookingItem: BookingItemOrderByRelationAggregateInput
}

input RoomOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  cinema: CinemaOrderByWithRelationInput
  CinemaId: SortOrder
  Seat: SeatOrderByRelationAggregateInput
  Showing: ShowingOrderByRelationAggregateInput
}

input CinemaOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  address: SortOrder
  phone: SortOrder
  clusterCinema: ClusterCinemaOrderByWithRelationInput
  ClusterCinemaId: SortOrder
  Room: RoomOrderByRelationAggregateInput
}

input ClusterCinemaOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  phone: SortOrder
  Cinema: CinemaOrderByRelationAggregateInput
}

input CinemaOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoomOrderByRelationAggregateInput {
  _count: SortOrder
}

input SeatOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookingItemOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShowingWhereUniqueInput {
  id: String
}

enum ShowingScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  RoomId
  FilmId
  price
  startDate
  endDate
  startTime
  endTime
}

input ShowingCountAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  RoomId: Boolean
  FilmId: Boolean
  price: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
  _all: Boolean
}

input ShowingAvgAggregateInput {
  price: Boolean
}

input ShowingSumAggregateInput {
  price: Boolean
}

input ShowingMinAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  RoomId: Boolean
  FilmId: Boolean
  price: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
}

input ShowingMaxAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  RoomId: Boolean
  FilmId: Boolean
  price: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
}

input SeatOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  name: SortOrder
  position: SortOrder
  room: RoomOrderByWithRelationInput
  RoomId: SortOrder
  BookingItem: BookingItemOrderByRelationAggregateInput
}

input SeatWhereUniqueInput {
  id: String
}

enum SeatScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  name
  position
  RoomId
}

input RoomWhereUniqueInput {
  id: String
}

enum RoomScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  name
  CinemaId
}

input PromotionOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  code: SortOrder
  discount: SortOrder
  maxDiscount: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  startTime: SortOrder
  endTime: SortOrder
  Booking: BookingOrderByRelationAggregateInput
}

input PromotionWhereUniqueInput {
  id: String
}

enum PromotionScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  code
  discount
  maxDiscount
  startDate
  endDate
  startTime
  endTime
}

input PromotionCountAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  code: Boolean
  discount: Boolean
  maxDiscount: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
  _all: Boolean
}

input PromotionAvgAggregateInput {
  discount: Boolean
  maxDiscount: Boolean
}

input PromotionSumAggregateInput {
  discount: Boolean
  maxDiscount: Boolean
}

input PromotionMinAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  code: Boolean
  discount: Boolean
  maxDiscount: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
}

input PromotionMaxAggregateInput {
  id: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  deletedAt: Boolean
  code: Boolean
  discount: Boolean
  maxDiscount: Boolean
  startDate: Boolean
  endDate: Boolean
  startTime: Boolean
  endTime: Boolean
}

input BookingItemOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  seat: SeatOrderByWithRelationInput
  SeatId: SortOrder
  showing: ShowingOrderByWithRelationInput
  ShowingId: SortOrder
  Booking: BookingOrderByWithRelationInput
  bookingId: SortOrder
}

input BookingOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrder
  user: UserOrderByWithRelationInput
  UserId: SortOrder
  amount: SortOrder
  price: SortOrder
  bookingItem: BookingItemOrderByRelationAggregateInput
  promotion: PromotionOrderByWithRelationInput
  PromotionId: SortOrder
  isPayment: SortOrder
  lineSeatMatrix: SortOrder
}

input BookingItemWhereUniqueInput {
  id: String
}

enum BookingItemScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  SeatId
  ShowingId
  bookingId
}

input BookingWhereUniqueInput {
  id: String
}

enum BookingScalarFieldEnum {
  id
  createdAt
  updatedAt
  deletedAt
  UserId
  amount
  price
  PromotionId
  isPayment
  lineSeatMatrix
}

type Mutation {
  signup(user: UserCreateInput!): Boolean!
  createUser(user: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): Boolean!
  deleteUser(where: UserWhereUniqueInput!): Boolean!
  login(userInput: LoginUserInput!): LoginResponse!
  adminLogin(data: LoginUserInput!): AdminLoginResponse!
  createFilmRecord(data: FilmCreateInput!): Film!
  updateFilmRecord(data: FilmUpdateInput!, where: FilmWhereUniqueInput!): Film!
  deleteFilmRecord(where: FilmWhereUniqueInput!): Boolean!
  addComment(data: FilmReivew!): Boolean!
  checkAvailableShowing(filmId: String!): Boolean!
  createShowing(data: ShowingCreateInput!): Showing!
  updateShowing(data: ShowingUpdateInput!, where: ShowingWhereUniqueInput!): Showing!
  deleteShowing(where: ShowingWhereUniqueInput!): Boolean!
  createSeat(data: SeatCreateInput!): Seat!
  updateSeat(data: SeatUpdateInput!, where: SeatWhereUniqueInput!): Seat!
  deleteSeat(where: SeatWhereUniqueInput!): Boolean!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Boolean!
  createPromotion(data: PromotionCreateInput!): Promotion!
  updatePromotion(data: PromotionUpdateInput!, where: PromotionWhereUniqueInput!): Promotion!
  deletePromotion(where: PromotionWhereUniqueInput!): Boolean!
  createBookingItem(data: BookingItemCreateInput!): BookingItem!
  updateBookingItem(data: BookingItemUpdateInput!, where: BookingItemWhereUniqueInput!): BookingItem!
  deleteBookingItem(where: BookingItemWhereUniqueInput!): Boolean!
  createBookingRecord(data: BookingCreateInput!): Booking!
  updateBookingRecord(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking!
  deleteBookingRecord(where: BookingWhereUniqueInput!): Boolean!
  userBookingTicket(data: BookingItemInput!): Booking!
  uploadFile(file: Upload!): Boolean!
  imageUrl(key: String!): String!
}

input UserCreateInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  Booking: BookingCreateNestedManyWithoutUserInput
  ReviewFilm: ReviewFilmCreateNestedManyWithoutUserInput
}

input BookingCreateNestedManyWithoutUserInput {
  create: [BookingCreateWithoutUserInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutUserInput!]
  createMany: BookingCreateManyUserInputEnvelope
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedManyWithoutBookingInput
  promotion: PromotionCreateNestedOneWithoutBookingInput
  isPayment: Boolean
  lineSeatMatrix: String
}

input BookingItemCreateNestedManyWithoutBookingInput {
  create: [BookingItemCreateWithoutBookingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutBookingInput!]
  createMany: BookingItemCreateManyBookingInputEnvelope
  connect: [BookingItemWhereUniqueInput!]
}

input BookingItemCreateWithoutBookingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
}

input SeatCreateNestedOneWithoutBookingItemInput {
  create: SeatCreateWithoutBookingItemInput
  connectOrCreate: SeatCreateOrConnectWithoutBookingItemInput
  connect: SeatWhereUniqueInput
}

input SeatCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: RoomCreateNestedOneWithoutSeatInput!
}

input RoomCreateNestedOneWithoutSeatInput {
  create: RoomCreateWithoutSeatInput
  connectOrCreate: RoomCreateOrConnectWithoutSeatInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutSeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Showing: ShowingCreateNestedManyWithoutRoomInput
}

input CinemaCreateNestedOneWithoutRoomInput {
  create: CinemaCreateWithoutRoomInput
  connectOrCreate: CinemaCreateOrConnectWithoutRoomInput
  connect: CinemaWhereUniqueInput
}

input CinemaCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  address: String!
  phone: String!
  clusterCinema: ClusterCinemaCreateNestedOneWithoutCinemaInput!
}

input ClusterCinemaCreateNestedOneWithoutCinemaInput {
  create: ClusterCinemaCreateWithoutCinemaInput
  connectOrCreate: ClusterCinemaCreateOrConnectWithoutCinemaInput
  connect: ClusterCinemaWhereUniqueInput
}

input ClusterCinemaCreateWithoutCinemaInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  phone: String!
}

input ClusterCinemaCreateOrConnectWithoutCinemaInput {
  where: ClusterCinemaWhereUniqueInput!
  create: ClusterCinemaCreateWithoutCinemaInput!
}

input ClusterCinemaWhereUniqueInput {
  id: String
}

input CinemaCreateOrConnectWithoutRoomInput {
  where: CinemaWhereUniqueInput!
  create: CinemaCreateWithoutRoomInput!
}

input CinemaWhereUniqueInput {
  id: String
}

input ShowingCreateNestedManyWithoutRoomInput {
  create: [ShowingCreateWithoutRoomInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutRoomInput!]
  createMany: ShowingCreateManyRoomInputEnvelope
  connect: [ShowingWhereUniqueInput!]
}

input ShowingCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  film: FilmCreateNestedOneWithoutShowingInput!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input FilmCreateNestedOneWithoutShowingInput {
  create: FilmCreateWithoutShowingInput
  connectOrCreate: FilmCreateOrConnectWithoutShowingInput
  connect: FilmWhereUniqueInput
}

input FilmCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  ReviewFilm: ReviewFilmCreateNestedManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmCreateNestedManyWithoutFilmInput
  Category: CategoryCreateNestedOneWithoutFilmInput
}

input ReviewFilmCreateNestedManyWithoutFilmInput {
  create: [ReviewFilmCreateWithoutFilmInput!]
  connectOrCreate: [ReviewFilmCreateOrConnectWithoutFilmInput!]
  createMany: ReviewFilmCreateManyFilmInputEnvelope
  connect: [ReviewFilmWhereUniqueInput!]
}

input ReviewFilmCreateWithoutFilmInput {
  id: String
  user: UserCreateNestedOneWithoutReviewFilmInput!
  comment: String
}

input UserCreateNestedOneWithoutReviewFilmInput {
  create: UserCreateWithoutReviewFilmInput
  connectOrCreate: UserCreateOrConnectWithoutReviewFilmInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReviewFilmInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  Booking: BookingCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutReviewFilmInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReviewFilmInput!
}

input ReviewFilmCreateOrConnectWithoutFilmInput {
  where: ReviewFilmWhereUniqueInput!
  create: ReviewFilmCreateWithoutFilmInput!
}

input ReviewFilmCreateManyFilmInputEnvelope {
  data: [ReviewFilmCreateManyFilmInput!]!
  skipDuplicates: Boolean
}

input ReviewFilmCreateManyFilmInput {
  id: String
  userId: String!
  comment: String
}

input ActorOnFilmCreateNestedManyWithoutFilmInput {
  create: [ActorOnFilmCreateWithoutFilmInput!]
  connectOrCreate: [ActorOnFilmCreateOrConnectWithoutFilmInput!]
  createMany: ActorOnFilmCreateManyFilmInputEnvelope
  connect: [ActorOnFilmWhereUniqueInput!]
}

input ActorOnFilmCreateWithoutFilmInput {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  actor: ActorCreateNestedOneWithoutActorOnFilmInput!
}

input ActorCreateNestedOneWithoutActorOnFilmInput {
  create: ActorCreateWithoutActorOnFilmInput
  connectOrCreate: ActorCreateOrConnectWithoutActorOnFilmInput
  connect: ActorWhereUniqueInput
}

input ActorCreateWithoutActorOnFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  birthday: DateTime
  description: String
  image: String
}

input ActorCreateOrConnectWithoutActorOnFilmInput {
  where: ActorWhereUniqueInput!
  create: ActorCreateWithoutActorOnFilmInput!
}

input ActorWhereUniqueInput {
  id: String
}

input ActorOnFilmCreateOrConnectWithoutFilmInput {
  where: ActorOnFilmWhereUniqueInput!
  create: ActorOnFilmCreateWithoutFilmInput!
}

input ActorOnFilmWhereUniqueInput {
  actorId_filmId: ActorOnFilmActorIdFilmIdCompoundUniqueInput
}

input ActorOnFilmActorIdFilmIdCompoundUniqueInput {
  actorId: String!
  filmId: String!
}

input ActorOnFilmCreateManyFilmInputEnvelope {
  data: [ActorOnFilmCreateManyFilmInput!]!
  skipDuplicates: Boolean
}

input ActorOnFilmCreateManyFilmInput {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  actorId: String!
}

input CategoryCreateNestedOneWithoutFilmInput {
  create: CategoryCreateWithoutFilmInput
  connectOrCreate: CategoryCreateOrConnectWithoutFilmInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutFilmInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  name: String!
  description: String
}

input CategoryCreateOrConnectWithoutFilmInput {
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutFilmInput!
}

input CategoryWhereUniqueInput {
  id: String
}

input FilmCreateOrConnectWithoutShowingInput {
  where: FilmWhereUniqueInput!
  create: FilmCreateWithoutShowingInput!
}

input BookingItemCreateNestedManyWithoutShowingInput {
  create: [BookingItemCreateWithoutShowingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutShowingInput!]
  createMany: BookingItemCreateManyShowingInputEnvelope
  connect: [BookingItemWhereUniqueInput!]
}

input BookingItemCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  Booking: BookingCreateNestedOneWithoutBookingItemInput!
}

input BookingCreateNestedOneWithoutBookingItemInput {
  create: BookingCreateWithoutBookingItemInput
  connectOrCreate: BookingCreateOrConnectWithoutBookingItemInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  promotion: PromotionCreateNestedOneWithoutBookingInput
  isPayment: Boolean
  lineSeatMatrix: String
}

input UserCreateNestedOneWithoutBookingInput {
  create: UserCreateWithoutBookingInput
  connectOrCreate: UserCreateOrConnectWithoutBookingInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookingInput {
  id: String
  createAt: DateTime
  updateAt: DateTime
  deleteAt: DateTime
  image: String
  firstname: String
  lastname: String
  birthday: DateTime
  address: String
  email: String!
  password: String!
  username: String!
  active: Boolean
  point: Int
  phone: String
  role: String
  ReviewFilm: ReviewFilmCreateNestedManyWithoutUserInput
}

input ReviewFilmCreateNestedManyWithoutUserInput {
  create: [ReviewFilmCreateWithoutUserInput!]
  connectOrCreate: [ReviewFilmCreateOrConnectWithoutUserInput!]
  createMany: ReviewFilmCreateManyUserInputEnvelope
  connect: [ReviewFilmWhereUniqueInput!]
}

input ReviewFilmCreateWithoutUserInput {
  id: String
  film: FilmCreateNestedOneWithoutReviewFilmInput!
  comment: String
}

input FilmCreateNestedOneWithoutReviewFilmInput {
  create: FilmCreateWithoutReviewFilmInput
  connectOrCreate: FilmCreateOrConnectWithoutReviewFilmInput
  connect: FilmWhereUniqueInput
}

input FilmCreateWithoutReviewFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  Showing: ShowingCreateNestedManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmCreateNestedManyWithoutFilmInput
  Category: CategoryCreateNestedOneWithoutFilmInput
}

input ShowingCreateNestedManyWithoutFilmInput {
  create: [ShowingCreateWithoutFilmInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutFilmInput!]
  createMany: ShowingCreateManyFilmInputEnvelope
  connect: [ShowingWhereUniqueInput!]
}

input ShowingCreateWithoutFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input RoomCreateNestedOneWithoutShowingInput {
  create: RoomCreateWithoutShowingInput
  connectOrCreate: RoomCreateOrConnectWithoutShowingInput
  connect: RoomWhereUniqueInput
}

input RoomCreateWithoutShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Seat: SeatCreateNestedManyWithoutRoomInput
}

input SeatCreateNestedManyWithoutRoomInput {
  create: [SeatCreateWithoutRoomInput!]
  connectOrCreate: [SeatCreateOrConnectWithoutRoomInput!]
  createMany: SeatCreateManyRoomInputEnvelope
  connect: [SeatWhereUniqueInput!]
}

input SeatCreateWithoutRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  BookingItem: BookingItemCreateNestedManyWithoutSeatInput
}

input BookingItemCreateNestedManyWithoutSeatInput {
  create: [BookingItemCreateWithoutSeatInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutSeatInput!]
  createMany: BookingItemCreateManySeatInputEnvelope
  connect: [BookingItemWhereUniqueInput!]
}

input BookingItemCreateWithoutSeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
  Booking: BookingCreateNestedOneWithoutBookingItemInput!
}

input ShowingCreateNestedOneWithoutBookingItemInput {
  create: ShowingCreateWithoutBookingItemInput
  connectOrCreate: ShowingCreateOrConnectWithoutBookingItemInput
  connect: ShowingWhereUniqueInput
}

input ShowingCreateWithoutBookingItemInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  film: FilmCreateNestedOneWithoutShowingInput!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

input ShowingCreateOrConnectWithoutBookingItemInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutBookingItemInput!
}

input BookingItemCreateOrConnectWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutSeatInput!
}

input BookingItemCreateManySeatInputEnvelope {
  data: [BookingItemCreateManySeatInput!]!
  skipDuplicates: Boolean
}

input BookingItemCreateManySeatInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  ShowingId: String!
  bookingId: String!
}

input SeatCreateOrConnectWithoutRoomInput {
  where: SeatWhereUniqueInput!
  create: SeatCreateWithoutRoomInput!
}

input SeatCreateManyRoomInputEnvelope {
  data: [SeatCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input SeatCreateManyRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
}

input RoomCreateOrConnectWithoutShowingInput {
  where: RoomWhereUniqueInput!
  create: RoomCreateWithoutShowingInput!
}

input ShowingCreateOrConnectWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutFilmInput!
}

input ShowingCreateManyFilmInputEnvelope {
  data: [ShowingCreateManyFilmInput!]!
  skipDuplicates: Boolean
}

input ShowingCreateManyFilmInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  RoomId: String!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

input FilmCreateOrConnectWithoutReviewFilmInput {
  where: FilmWhereUniqueInput!
  create: FilmCreateWithoutReviewFilmInput!
}

input ReviewFilmCreateOrConnectWithoutUserInput {
  where: ReviewFilmWhereUniqueInput!
  create: ReviewFilmCreateWithoutUserInput!
}

input ReviewFilmCreateManyUserInputEnvelope {
  data: [ReviewFilmCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReviewFilmCreateManyUserInput {
  id: String
  filmId: String!
  comment: String
}

input UserCreateOrConnectWithoutBookingInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutBookingInput!
}

input PromotionCreateNestedOneWithoutBookingInput {
  create: PromotionCreateWithoutBookingInput
  connectOrCreate: PromotionCreateOrConnectWithoutBookingInput
  connect: PromotionWhereUniqueInput
}

input PromotionCreateWithoutBookingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

input PromotionCreateOrConnectWithoutBookingInput {
  where: PromotionWhereUniqueInput!
  create: PromotionCreateWithoutBookingInput!
}

input BookingCreateOrConnectWithoutBookingItemInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutBookingItemInput!
}

input BookingItemCreateOrConnectWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutShowingInput!
}

input BookingItemCreateManyShowingInputEnvelope {
  data: [BookingItemCreateManyShowingInput!]!
  skipDuplicates: Boolean
}

input BookingItemCreateManyShowingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  SeatId: String!
  bookingId: String!
}

input ShowingCreateOrConnectWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  create: ShowingCreateWithoutRoomInput!
}

input ShowingCreateManyRoomInputEnvelope {
  data: [ShowingCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input ShowingCreateManyRoomInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  FilmId: String!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
}

input RoomCreateOrConnectWithoutSeatInput {
  where: RoomWhereUniqueInput!
  create: RoomCreateWithoutSeatInput!
}

input SeatCreateOrConnectWithoutBookingItemInput {
  where: SeatWhereUniqueInput!
  create: SeatCreateWithoutBookingItemInput!
}

input BookingItemCreateOrConnectWithoutBookingInput {
  where: BookingItemWhereUniqueInput!
  create: BookingItemCreateWithoutBookingInput!
}

input BookingItemCreateManyBookingInputEnvelope {
  data: [BookingItemCreateManyBookingInput!]!
  skipDuplicates: Boolean
}

input BookingItemCreateManyBookingInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  SeatId: String!
  ShowingId: String!
}

input BookingCreateOrConnectWithoutUserInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutUserInput!
}

input BookingCreateManyUserInputEnvelope {
  data: [BookingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BookingCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  amount: Int!
  price: Int!
  PromotionId: String
  isPayment: Boolean
  lineSeatMatrix: String
}

input UserUpdateInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
  point: NullableIntFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutUserInput
  ReviewFilm: ReviewFilmUpdateManyWithoutUserInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BookingUpdateManyWithoutUserInput {
  create: [BookingCreateWithoutUserInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutUserInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutUserInput!]
  createMany: BookingCreateManyUserInputEnvelope
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BookingUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [BookingScalarWhereInput!]
}

input BookingUpsertWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutUserInput!
  create: BookingCreateWithoutUserInput!
}

input BookingUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateManyWithoutBookingInput
  promotion: PromotionUpdateOneWithoutBookingInput
  isPayment: NullableBoolFieldUpdateOperationsInput
  lineSeatMatrix: NullableStringFieldUpdateOperationsInput
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input BookingItemUpdateManyWithoutBookingInput {
  create: [BookingItemCreateWithoutBookingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutBookingInput!]
  upsert: [BookingItemUpsertWithWhereUniqueWithoutBookingInput!]
  createMany: BookingItemCreateManyBookingInputEnvelope
  set: [BookingItemWhereUniqueInput!]
  disconnect: [BookingItemWhereUniqueInput!]
  delete: [BookingItemWhereUniqueInput!]
  connect: [BookingItemWhereUniqueInput!]
  update: [BookingItemUpdateWithWhereUniqueWithoutBookingInput!]
  updateMany: [BookingItemUpdateManyWithWhereWithoutBookingInput!]
  deleteMany: [BookingItemScalarWhereInput!]
}

input BookingItemUpsertWithWhereUniqueWithoutBookingInput {
  where: BookingItemWhereUniqueInput!
  update: BookingItemUpdateWithoutBookingInput!
  create: BookingItemCreateWithoutBookingInput!
}

input BookingItemUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
}

input SeatUpdateOneRequiredWithoutBookingItemInput {
  create: SeatCreateWithoutBookingItemInput
  connectOrCreate: SeatCreateOrConnectWithoutBookingItemInput
  upsert: SeatUpsertWithoutBookingItemInput
  connect: SeatWhereUniqueInput
  update: SeatUpdateWithoutBookingItemInput
}

input SeatUpsertWithoutBookingItemInput {
  update: SeatUpdateWithoutBookingItemInput!
  create: SeatCreateWithoutBookingItemInput!
}

input SeatUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutSeatInput
}

input RoomUpdateOneRequiredWithoutSeatInput {
  create: RoomCreateWithoutSeatInput
  connectOrCreate: RoomCreateOrConnectWithoutSeatInput
  upsert: RoomUpsertWithoutSeatInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutSeatInput
}

input RoomUpsertWithoutSeatInput {
  update: RoomUpdateWithoutSeatInput!
  create: RoomCreateWithoutSeatInput!
}

input RoomUpdateWithoutSeatInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Showing: ShowingUpdateManyWithoutRoomInput
}

input CinemaUpdateOneRequiredWithoutRoomInput {
  create: CinemaCreateWithoutRoomInput
  connectOrCreate: CinemaCreateOrConnectWithoutRoomInput
  upsert: CinemaUpsertWithoutRoomInput
  connect: CinemaWhereUniqueInput
  update: CinemaUpdateWithoutRoomInput
}

input CinemaUpsertWithoutRoomInput {
  update: CinemaUpdateWithoutRoomInput!
  create: CinemaCreateWithoutRoomInput!
}

input CinemaUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  address: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  clusterCinema: ClusterCinemaUpdateOneRequiredWithoutCinemaInput
}

input ClusterCinemaUpdateOneRequiredWithoutCinemaInput {
  create: ClusterCinemaCreateWithoutCinemaInput
  connectOrCreate: ClusterCinemaCreateOrConnectWithoutCinemaInput
  upsert: ClusterCinemaUpsertWithoutCinemaInput
  connect: ClusterCinemaWhereUniqueInput
  update: ClusterCinemaUpdateWithoutCinemaInput
}

input ClusterCinemaUpsertWithoutCinemaInput {
  update: ClusterCinemaUpdateWithoutCinemaInput!
  create: ClusterCinemaCreateWithoutCinemaInput!
}

input ClusterCinemaUpdateWithoutCinemaInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
}

input ShowingUpdateManyWithoutRoomInput {
  create: [ShowingCreateWithoutRoomInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutRoomInput!]
  upsert: [ShowingUpsertWithWhereUniqueWithoutRoomInput!]
  createMany: ShowingCreateManyRoomInputEnvelope
  set: [ShowingWhereUniqueInput!]
  disconnect: [ShowingWhereUniqueInput!]
  delete: [ShowingWhereUniqueInput!]
  connect: [ShowingWhereUniqueInput!]
  update: [ShowingUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [ShowingUpdateManyWithWhereWithoutRoomInput!]
  deleteMany: [ShowingScalarWhereInput!]
}

input ShowingUpsertWithWhereUniqueWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  update: ShowingUpdateWithoutRoomInput!
  create: ShowingCreateWithoutRoomInput!
}

input ShowingUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  price: IntFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input FilmUpdateOneRequiredWithoutShowingInput {
  create: FilmCreateWithoutShowingInput
  connectOrCreate: FilmCreateOrConnectWithoutShowingInput
  upsert: FilmUpsertWithoutShowingInput
  connect: FilmWhereUniqueInput
  update: FilmUpdateWithoutShowingInput
}

input FilmUpsertWithoutShowingInput {
  update: FilmUpdateWithoutShowingInput!
  create: FilmCreateWithoutShowingInput!
}

input FilmUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  trailler: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  director: NullableStringFieldUpdateOperationsInput
  actor: NullableStringFieldUpdateOperationsInput
  time: NullableIntFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageDescription1: NullableStringFieldUpdateOperationsInput
  imageDescription2: NullableStringFieldUpdateOperationsInput
  imageDescription3: NullableStringFieldUpdateOperationsInput
  ReviewFilm: ReviewFilmUpdateManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmUpdateManyWithoutFilmInput
  Category: CategoryUpdateOneWithoutFilmInput
}

input ReviewFilmUpdateManyWithoutFilmInput {
  create: [ReviewFilmCreateWithoutFilmInput!]
  connectOrCreate: [ReviewFilmCreateOrConnectWithoutFilmInput!]
  upsert: [ReviewFilmUpsertWithWhereUniqueWithoutFilmInput!]
  createMany: ReviewFilmCreateManyFilmInputEnvelope
  set: [ReviewFilmWhereUniqueInput!]
  disconnect: [ReviewFilmWhereUniqueInput!]
  delete: [ReviewFilmWhereUniqueInput!]
  connect: [ReviewFilmWhereUniqueInput!]
  update: [ReviewFilmUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [ReviewFilmUpdateManyWithWhereWithoutFilmInput!]
  deleteMany: [ReviewFilmScalarWhereInput!]
}

input ReviewFilmUpsertWithWhereUniqueWithoutFilmInput {
  where: ReviewFilmWhereUniqueInput!
  update: ReviewFilmUpdateWithoutFilmInput!
  create: ReviewFilmCreateWithoutFilmInput!
}

input ReviewFilmUpdateWithoutFilmInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReviewFilmInput
  comment: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutReviewFilmInput {
  create: UserCreateWithoutReviewFilmInput
  connectOrCreate: UserCreateOrConnectWithoutReviewFilmInput
  upsert: UserUpsertWithoutReviewFilmInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReviewFilmInput
}

input UserUpsertWithoutReviewFilmInput {
  update: UserUpdateWithoutReviewFilmInput!
  create: UserCreateWithoutReviewFilmInput!
}

input UserUpdateWithoutReviewFilmInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
  point: NullableIntFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutUserInput
}

input ReviewFilmUpdateWithWhereUniqueWithoutFilmInput {
  where: ReviewFilmWhereUniqueInput!
  data: ReviewFilmUpdateWithoutFilmInput!
}

input ReviewFilmUpdateManyWithWhereWithoutFilmInput {
  where: ReviewFilmScalarWhereInput!
  data: ReviewFilmUpdateManyMutationInput!
}

input ReviewFilmScalarWhereInput {
  AND: [ReviewFilmScalarWhereInput!]
  OR: [ReviewFilmScalarWhereInput!]
  NOT: [ReviewFilmScalarWhereInput!]
  id: StringFilter
  userId: StringFilter
  filmId: StringFilter
  comment: StringNullableFilter
}

input ReviewFilmUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  comment: NullableStringFieldUpdateOperationsInput
}

input ActorOnFilmUpdateManyWithoutFilmInput {
  create: [ActorOnFilmCreateWithoutFilmInput!]
  connectOrCreate: [ActorOnFilmCreateOrConnectWithoutFilmInput!]
  upsert: [ActorOnFilmUpsertWithWhereUniqueWithoutFilmInput!]
  createMany: ActorOnFilmCreateManyFilmInputEnvelope
  set: [ActorOnFilmWhereUniqueInput!]
  disconnect: [ActorOnFilmWhereUniqueInput!]
  delete: [ActorOnFilmWhereUniqueInput!]
  connect: [ActorOnFilmWhereUniqueInput!]
  update: [ActorOnFilmUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [ActorOnFilmUpdateManyWithWhereWithoutFilmInput!]
  deleteMany: [ActorOnFilmScalarWhereInput!]
}

input ActorOnFilmUpsertWithWhereUniqueWithoutFilmInput {
  where: ActorOnFilmWhereUniqueInput!
  update: ActorOnFilmUpdateWithoutFilmInput!
  create: ActorOnFilmCreateWithoutFilmInput!
}

input ActorOnFilmUpdateWithoutFilmInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  actor: ActorUpdateOneRequiredWithoutActorOnFilmInput
}

input ActorUpdateOneRequiredWithoutActorOnFilmInput {
  create: ActorCreateWithoutActorOnFilmInput
  connectOrCreate: ActorCreateOrConnectWithoutActorOnFilmInput
  upsert: ActorUpsertWithoutActorOnFilmInput
  connect: ActorWhereUniqueInput
  update: ActorUpdateWithoutActorOnFilmInput
}

input ActorUpsertWithoutActorOnFilmInput {
  update: ActorUpdateWithoutActorOnFilmInput!
  create: ActorCreateWithoutActorOnFilmInput!
}

input ActorUpdateWithoutActorOnFilmInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
}

input ActorOnFilmUpdateWithWhereUniqueWithoutFilmInput {
  where: ActorOnFilmWhereUniqueInput!
  data: ActorOnFilmUpdateWithoutFilmInput!
}

input ActorOnFilmUpdateManyWithWhereWithoutFilmInput {
  where: ActorOnFilmScalarWhereInput!
  data: ActorOnFilmUpdateManyMutationInput!
}

input ActorOnFilmScalarWhereInput {
  AND: [ActorOnFilmScalarWhereInput!]
  OR: [ActorOnFilmScalarWhereInput!]
  NOT: [ActorOnFilmScalarWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  actorId: StringFilter
  filmId: StringFilter
}

input ActorOnFilmUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneWithoutFilmInput {
  create: CategoryCreateWithoutFilmInput
  connectOrCreate: CategoryCreateOrConnectWithoutFilmInput
  upsert: CategoryUpsertWithoutFilmInput
  disconnect: Boolean
  delete: Boolean
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutFilmInput
}

input CategoryUpsertWithoutFilmInput {
  update: CategoryUpdateWithoutFilmInput!
  create: CategoryCreateWithoutFilmInput!
}

input CategoryUpdateWithoutFilmInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
}

input BookingItemUpdateManyWithoutShowingInput {
  create: [BookingItemCreateWithoutShowingInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutShowingInput!]
  upsert: [BookingItemUpsertWithWhereUniqueWithoutShowingInput!]
  createMany: BookingItemCreateManyShowingInputEnvelope
  set: [BookingItemWhereUniqueInput!]
  disconnect: [BookingItemWhereUniqueInput!]
  delete: [BookingItemWhereUniqueInput!]
  connect: [BookingItemWhereUniqueInput!]
  update: [BookingItemUpdateWithWhereUniqueWithoutShowingInput!]
  updateMany: [BookingItemUpdateManyWithWhereWithoutShowingInput!]
  deleteMany: [BookingItemScalarWhereInput!]
}

input BookingItemUpsertWithWhereUniqueWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  update: BookingItemUpdateWithoutShowingInput!
  create: BookingItemCreateWithoutShowingInput!
}

input BookingItemUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  Booking: BookingUpdateOneRequiredWithoutBookingItemInput
}

input BookingUpdateOneRequiredWithoutBookingItemInput {
  create: BookingCreateWithoutBookingItemInput
  connectOrCreate: BookingCreateOrConnectWithoutBookingItemInput
  upsert: BookingUpsertWithoutBookingItemInput
  connect: BookingWhereUniqueInput
  update: BookingUpdateWithoutBookingItemInput
}

input BookingUpsertWithoutBookingItemInput {
  update: BookingUpdateWithoutBookingItemInput!
  create: BookingCreateWithoutBookingItemInput!
}

input BookingUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  promotion: PromotionUpdateOneWithoutBookingInput
  isPayment: NullableBoolFieldUpdateOperationsInput
  lineSeatMatrix: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutBookingInput {
  create: UserCreateWithoutBookingInput
  connectOrCreate: UserCreateOrConnectWithoutBookingInput
  upsert: UserUpsertWithoutBookingInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutBookingInput
}

input UserUpsertWithoutBookingInput {
  update: UserUpdateWithoutBookingInput!
  create: UserCreateWithoutBookingInput!
}

input UserUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createAt: NullableDateTimeFieldUpdateOperationsInput
  updateAt: NullableDateTimeFieldUpdateOperationsInput
  deleteAt: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  lastname: NullableStringFieldUpdateOperationsInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  address: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  active: NullableBoolFieldUpdateOperationsInput
  point: NullableIntFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  role: NullableStringFieldUpdateOperationsInput
  ReviewFilm: ReviewFilmUpdateManyWithoutUserInput
}

input ReviewFilmUpdateManyWithoutUserInput {
  create: [ReviewFilmCreateWithoutUserInput!]
  connectOrCreate: [ReviewFilmCreateOrConnectWithoutUserInput!]
  upsert: [ReviewFilmUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ReviewFilmCreateManyUserInputEnvelope
  set: [ReviewFilmWhereUniqueInput!]
  disconnect: [ReviewFilmWhereUniqueInput!]
  delete: [ReviewFilmWhereUniqueInput!]
  connect: [ReviewFilmWhereUniqueInput!]
  update: [ReviewFilmUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReviewFilmUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ReviewFilmScalarWhereInput!]
}

input ReviewFilmUpsertWithWhereUniqueWithoutUserInput {
  where: ReviewFilmWhereUniqueInput!
  update: ReviewFilmUpdateWithoutUserInput!
  create: ReviewFilmCreateWithoutUserInput!
}

input ReviewFilmUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  film: FilmUpdateOneRequiredWithoutReviewFilmInput
  comment: NullableStringFieldUpdateOperationsInput
}

input FilmUpdateOneRequiredWithoutReviewFilmInput {
  create: FilmCreateWithoutReviewFilmInput
  connectOrCreate: FilmCreateOrConnectWithoutReviewFilmInput
  upsert: FilmUpsertWithoutReviewFilmInput
  connect: FilmWhereUniqueInput
  update: FilmUpdateWithoutReviewFilmInput
}

input FilmUpsertWithoutReviewFilmInput {
  update: FilmUpdateWithoutReviewFilmInput!
  create: FilmCreateWithoutReviewFilmInput!
}

input FilmUpdateWithoutReviewFilmInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  trailler: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  director: NullableStringFieldUpdateOperationsInput
  actor: NullableStringFieldUpdateOperationsInput
  time: NullableIntFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageDescription1: NullableStringFieldUpdateOperationsInput
  imageDescription2: NullableStringFieldUpdateOperationsInput
  imageDescription3: NullableStringFieldUpdateOperationsInput
  Showing: ShowingUpdateManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmUpdateManyWithoutFilmInput
  Category: CategoryUpdateOneWithoutFilmInput
}

input ShowingUpdateManyWithoutFilmInput {
  create: [ShowingCreateWithoutFilmInput!]
  connectOrCreate: [ShowingCreateOrConnectWithoutFilmInput!]
  upsert: [ShowingUpsertWithWhereUniqueWithoutFilmInput!]
  createMany: ShowingCreateManyFilmInputEnvelope
  set: [ShowingWhereUniqueInput!]
  disconnect: [ShowingWhereUniqueInput!]
  delete: [ShowingWhereUniqueInput!]
  connect: [ShowingWhereUniqueInput!]
  update: [ShowingUpdateWithWhereUniqueWithoutFilmInput!]
  updateMany: [ShowingUpdateManyWithWhereWithoutFilmInput!]
  deleteMany: [ShowingScalarWhereInput!]
}

input ShowingUpsertWithWhereUniqueWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  update: ShowingUpdateWithoutFilmInput!
  create: ShowingCreateWithoutFilmInput!
}

input ShowingUpdateWithoutFilmInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  price: IntFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input RoomUpdateOneRequiredWithoutShowingInput {
  create: RoomCreateWithoutShowingInput
  connectOrCreate: RoomCreateOrConnectWithoutShowingInput
  upsert: RoomUpsertWithoutShowingInput
  connect: RoomWhereUniqueInput
  update: RoomUpdateWithoutShowingInput
}

input RoomUpsertWithoutShowingInput {
  update: RoomUpdateWithoutShowingInput!
  create: RoomCreateWithoutShowingInput!
}

input RoomUpdateWithoutShowingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Seat: SeatUpdateManyWithoutRoomInput
}

input SeatUpdateManyWithoutRoomInput {
  create: [SeatCreateWithoutRoomInput!]
  connectOrCreate: [SeatCreateOrConnectWithoutRoomInput!]
  upsert: [SeatUpsertWithWhereUniqueWithoutRoomInput!]
  createMany: SeatCreateManyRoomInputEnvelope
  set: [SeatWhereUniqueInput!]
  disconnect: [SeatWhereUniqueInput!]
  delete: [SeatWhereUniqueInput!]
  connect: [SeatWhereUniqueInput!]
  update: [SeatUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [SeatUpdateManyWithWhereWithoutRoomInput!]
  deleteMany: [SeatScalarWhereInput!]
}

input SeatUpsertWithWhereUniqueWithoutRoomInput {
  where: SeatWhereUniqueInput!
  update: SeatUpdateWithoutRoomInput!
  create: SeatCreateWithoutRoomInput!
}

input SeatUpdateWithoutRoomInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutSeatInput
}

input BookingItemUpdateManyWithoutSeatInput {
  create: [BookingItemCreateWithoutSeatInput!]
  connectOrCreate: [BookingItemCreateOrConnectWithoutSeatInput!]
  upsert: [BookingItemUpsertWithWhereUniqueWithoutSeatInput!]
  createMany: BookingItemCreateManySeatInputEnvelope
  set: [BookingItemWhereUniqueInput!]
  disconnect: [BookingItemWhereUniqueInput!]
  delete: [BookingItemWhereUniqueInput!]
  connect: [BookingItemWhereUniqueInput!]
  update: [BookingItemUpdateWithWhereUniqueWithoutSeatInput!]
  updateMany: [BookingItemUpdateManyWithWhereWithoutSeatInput!]
  deleteMany: [BookingItemScalarWhereInput!]
}

input BookingItemUpsertWithWhereUniqueWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  update: BookingItemUpdateWithoutSeatInput!
  create: BookingItemCreateWithoutSeatInput!
}

input BookingItemUpdateWithoutSeatInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
  Booking: BookingUpdateOneRequiredWithoutBookingItemInput
}

input ShowingUpdateOneRequiredWithoutBookingItemInput {
  create: ShowingCreateWithoutBookingItemInput
  connectOrCreate: ShowingCreateOrConnectWithoutBookingItemInput
  upsert: ShowingUpsertWithoutBookingItemInput
  connect: ShowingWhereUniqueInput
  update: ShowingUpdateWithoutBookingItemInput
}

input ShowingUpsertWithoutBookingItemInput {
  update: ShowingUpdateWithoutBookingItemInput!
  create: ShowingCreateWithoutBookingItemInput!
}

input ShowingUpdateWithoutBookingItemInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  price: IntFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
}

input BookingItemUpdateWithWhereUniqueWithoutSeatInput {
  where: BookingItemWhereUniqueInput!
  data: BookingItemUpdateWithoutSeatInput!
}

input BookingItemUpdateManyWithWhereWithoutSeatInput {
  where: BookingItemScalarWhereInput!
  data: BookingItemUpdateManyMutationInput!
}

input BookingItemScalarWhereInput {
  AND: [BookingItemScalarWhereInput!]
  OR: [BookingItemScalarWhereInput!]
  NOT: [BookingItemScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  SeatId: StringFilter
  ShowingId: StringFilter
  bookingId: StringFilter
}

input BookingItemUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SeatUpdateWithWhereUniqueWithoutRoomInput {
  where: SeatWhereUniqueInput!
  data: SeatUpdateWithoutRoomInput!
}

input SeatUpdateManyWithWhereWithoutRoomInput {
  where: SeatScalarWhereInput!
  data: SeatUpdateManyMutationInput!
}

input SeatScalarWhereInput {
  AND: [SeatScalarWhereInput!]
  OR: [SeatScalarWhereInput!]
  NOT: [SeatScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  name: StringFilter
  position: StringFilter
  RoomId: StringFilter
}

input SeatUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
}

input ShowingUpdateWithWhereUniqueWithoutFilmInput {
  where: ShowingWhereUniqueInput!
  data: ShowingUpdateWithoutFilmInput!
}

input ShowingUpdateManyWithWhereWithoutFilmInput {
  where: ShowingScalarWhereInput!
  data: ShowingUpdateManyMutationInput!
}

input ShowingScalarWhereInput {
  AND: [ShowingScalarWhereInput!]
  OR: [ShowingScalarWhereInput!]
  NOT: [ShowingScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  RoomId: StringFilter
  FilmId: StringFilter
  price: IntFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  startTime: DateTimeNullableFilter
  endTime: DateTimeNullableFilter
}

input ShowingUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
}

input ReviewFilmUpdateWithWhereUniqueWithoutUserInput {
  where: ReviewFilmWhereUniqueInput!
  data: ReviewFilmUpdateWithoutUserInput!
}

input ReviewFilmUpdateManyWithWhereWithoutUserInput {
  where: ReviewFilmScalarWhereInput!
  data: ReviewFilmUpdateManyMutationInput!
}

input PromotionUpdateOneWithoutBookingInput {
  create: PromotionCreateWithoutBookingInput
  connectOrCreate: PromotionCreateOrConnectWithoutBookingInput
  upsert: PromotionUpsertWithoutBookingInput
  disconnect: Boolean
  delete: Boolean
  connect: PromotionWhereUniqueInput
  update: PromotionUpdateWithoutBookingInput
}

input PromotionUpsertWithoutBookingInput {
  update: PromotionUpdateWithoutBookingInput!
  create: PromotionCreateWithoutBookingInput!
}

input PromotionUpdateWithoutBookingInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  maxDiscount: FloatFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input BookingItemUpdateWithWhereUniqueWithoutShowingInput {
  where: BookingItemWhereUniqueInput!
  data: BookingItemUpdateWithoutShowingInput!
}

input BookingItemUpdateManyWithWhereWithoutShowingInput {
  where: BookingItemScalarWhereInput!
  data: BookingItemUpdateManyMutationInput!
}

input ShowingUpdateWithWhereUniqueWithoutRoomInput {
  where: ShowingWhereUniqueInput!
  data: ShowingUpdateWithoutRoomInput!
}

input ShowingUpdateManyWithWhereWithoutRoomInput {
  where: ShowingScalarWhereInput!
  data: ShowingUpdateManyMutationInput!
}

input BookingItemUpdateWithWhereUniqueWithoutBookingInput {
  where: BookingItemWhereUniqueInput!
  data: BookingItemUpdateWithoutBookingInput!
}

input BookingItemUpdateManyWithWhereWithoutBookingInput {
  where: BookingItemScalarWhereInput!
  data: BookingItemUpdateManyMutationInput!
}

input BookingUpdateWithWhereUniqueWithoutUserInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutUserInput!
}

input BookingUpdateManyWithWhereWithoutUserInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyMutationInput!
}

input BookingScalarWhereInput {
  AND: [BookingScalarWhereInput!]
  OR: [BookingScalarWhereInput!]
  NOT: [BookingScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  deletedAt: DateTimeNullableFilter
  UserId: StringFilter
  amount: IntFilter
  price: IntFilter
  PromotionId: StringNullableFilter
  isPayment: BoolNullableFilter
  lineSeatMatrix: StringNullableFilter
}

input BookingUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  isPayment: NullableBoolFieldUpdateOperationsInput
  lineSeatMatrix: NullableStringFieldUpdateOperationsInput
}

input LoginUserInput {
  id: String
  username: String!
  password: String!
}

input FilmCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  trailler: String!
  name: String!
  description: String
  director: String
  actor: String
  time: Int
  image: String
  imageDescription1: String
  imageDescription2: String
  imageDescription3: String
  Showing: ShowingCreateNestedManyWithoutFilmInput
  ReviewFilm: ReviewFilmCreateNestedManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmCreateNestedManyWithoutFilmInput
  Category: CategoryCreateNestedOneWithoutFilmInput
}

input FilmUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  trailler: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  director: NullableStringFieldUpdateOperationsInput
  actor: NullableStringFieldUpdateOperationsInput
  time: NullableIntFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageDescription1: NullableStringFieldUpdateOperationsInput
  imageDescription2: NullableStringFieldUpdateOperationsInput
  imageDescription3: NullableStringFieldUpdateOperationsInput
  Showing: ShowingUpdateManyWithoutFilmInput
  ReviewFilm: ReviewFilmUpdateManyWithoutFilmInput
  ActorOnFilm: ActorOnFilmUpdateManyWithoutFilmInput
  Category: CategoryUpdateOneWithoutFilmInput
}

input FilmReivew {
  filmId: String!
  comment: String!
}

input ShowingCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  room: RoomCreateNestedOneWithoutShowingInput!
  film: FilmCreateNestedOneWithoutShowingInput!
  price: Int!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  BookingItem: BookingItemCreateNestedManyWithoutShowingInput
}

input ShowingUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutShowingInput
  film: FilmUpdateOneRequiredWithoutShowingInput
  price: IntFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  BookingItem: BookingItemUpdateManyWithoutShowingInput
}

input SeatCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  position: String!
  room: RoomCreateNestedOneWithoutSeatInput!
  BookingItem: BookingItemCreateNestedManyWithoutSeatInput
}

input SeatUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  position: StringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutSeatInput
  BookingItem: BookingItemUpdateManyWithoutSeatInput
}

input RoomCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  name: String!
  cinema: CinemaCreateNestedOneWithoutRoomInput!
  Seat: SeatCreateNestedManyWithoutRoomInput
  Showing: ShowingCreateNestedManyWithoutRoomInput
}

input RoomUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  cinema: CinemaUpdateOneRequiredWithoutRoomInput
  Seat: SeatUpdateManyWithoutRoomInput
  Showing: ShowingUpdateManyWithoutRoomInput
}

input PromotionCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  code: String!
  discount: Float!
  maxDiscount: Float!
  startDate: DateTime
  endDate: DateTime
  startTime: DateTime
  endTime: DateTime
  Booking: BookingCreateNestedManyWithoutPromotionInput
}

input BookingCreateNestedManyWithoutPromotionInput {
  create: [BookingCreateWithoutPromotionInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutPromotionInput!]
  createMany: BookingCreateManyPromotionInputEnvelope
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateWithoutPromotionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedManyWithoutBookingInput
  isPayment: Boolean
  lineSeatMatrix: String
}

input BookingCreateOrConnectWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  create: BookingCreateWithoutPromotionInput!
}

input BookingCreateManyPromotionInputEnvelope {
  data: [BookingCreateManyPromotionInput!]!
  skipDuplicates: Boolean
}

input BookingCreateManyPromotionInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  UserId: String!
  amount: Int!
  price: Int!
  isPayment: Boolean
  lineSeatMatrix: String
}

input PromotionUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  code: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  maxDiscount: FloatFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  startTime: NullableDateTimeFieldUpdateOperationsInput
  endTime: NullableDateTimeFieldUpdateOperationsInput
  Booking: BookingUpdateManyWithoutPromotionInput
}

input BookingUpdateManyWithoutPromotionInput {
  create: [BookingCreateWithoutPromotionInput!]
  connectOrCreate: [BookingCreateOrConnectWithoutPromotionInput!]
  upsert: [BookingUpsertWithWhereUniqueWithoutPromotionInput!]
  createMany: BookingCreateManyPromotionInputEnvelope
  set: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  connect: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithWhereUniqueWithoutPromotionInput!]
  updateMany: [BookingUpdateManyWithWhereWithoutPromotionInput!]
  deleteMany: [BookingScalarWhereInput!]
}

input BookingUpsertWithWhereUniqueWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPromotionInput!
  create: BookingCreateWithoutPromotionInput!
}

input BookingUpdateWithoutPromotionInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateManyWithoutBookingInput
  isPayment: NullableBoolFieldUpdateOperationsInput
  lineSeatMatrix: NullableStringFieldUpdateOperationsInput
}

input BookingUpdateWithWhereUniqueWithoutPromotionInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPromotionInput!
}

input BookingUpdateManyWithWhereWithoutPromotionInput {
  where: BookingScalarWhereInput!
  data: BookingUpdateManyMutationInput!
}

input BookingItemCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  seat: SeatCreateNestedOneWithoutBookingItemInput!
  showing: ShowingCreateNestedOneWithoutBookingItemInput!
  Booking: BookingCreateNestedOneWithoutBookingItemInput!
}

input BookingItemUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  seat: SeatUpdateOneRequiredWithoutBookingItemInput
  showing: ShowingUpdateOneRequiredWithoutBookingItemInput
  Booking: BookingUpdateOneRequiredWithoutBookingItemInput
}

input BookingCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookingInput!
  amount: Int!
  price: Int!
  bookingItem: BookingItemCreateNestedManyWithoutBookingInput
  promotion: PromotionCreateNestedOneWithoutBookingInput
  isPayment: Boolean
  lineSeatMatrix: String
}

input BookingUpdateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookingInput
  amount: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  bookingItem: BookingItemUpdateManyWithoutBookingInput
  promotion: PromotionUpdateOneWithoutBookingInput
  isPayment: NullableBoolFieldUpdateOperationsInput
  lineSeatMatrix: NullableStringFieldUpdateOperationsInput
}

input BookingItemInput {
  showingId: String!
  amount: Float!
  price: Float!
  promotionId: String
  listSeat: String
  roomId: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload